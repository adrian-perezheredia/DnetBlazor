@page "/MultipleRowSelectionExample"

@using System.Net.Http.Json
@using Dnet.App.Shared.Infrastructure.Entities
@using Dnet.App.Shared.Infrastructure.Services
@using Dnet.Blazor.Components.AdminLayout.Infrastructure.Enums
@using Dnet.Blazor.Components.AdminLayout.Infrastructure.Interfaces
@using Dnet.Blazor.Components.AdminLayout.Infrastructure.Models
@using Dnet.Blazor.Components.Grid.BlgGrid
@using Dnet.Blazor.Components.Grid.Infrastructure.Entities
@using Dnet.Blazor.Components.Grid.Infrastructure.Enums

@inject IThemeMessageService<ThemeConfigData> ThemeMessageService
@inject HttpClient HttpClient
@inject IHttpClientFactory ClientFactory
@inject IApplicationServiceService ApplicationServiceService

<div class="container-fluid" style="padding-top: 10px;">
    <div class="row" style="height: calc(100% - 40px)">
        <div class="col-12" style="height: calc(100% - 0px);">
            <div class="dnet-panel-header-wrapper dnet-m-t-15">
                <div class="dnet-panel-header-text">
                    <div class="dnet-m-l-15">
                        <span style="font-weight:700; font-size:.875rem;"> Grid (A.K.A BlGrid)</span>
                    </div>
                </div>
            </div>
            <div style="height: calc(100% - 0px); width: 100%; background-color: #FFFFFF">
                <BlgGrid @ref="_blGridReference"
                         GridData="@_persons"
                         GridColumns="@_gridColumns"
                         TItem="Person"
                         GridOptions="@_gridOptions">
                </BlgGrid>
            </div>
        </div>
    </div>
</div>

@code {


    private BlgGrid<Person> _blGridReference;

    private bool _showChecks = false;


    public List<Person> _persons { get; set; }

    public List<GridColumn<Person>> _gridColumns { get; set; }

    public GridOptions<Person> _gridOptions { get; set; }


    protected override void OnInitialized()
    {
        _gridOptions = GetGridOptions();

        _gridColumns = GetGridColumns();
    }

    protected override async Task OnInitializedAsync()
    {
        _persons = await GetPersons();

        _gridOptions.NumberOfRows = _persons.Count;
    }

    private async Task<List<Person>> GetPersons()
    {
        var client = ClientFactory.CreateClient("WebHostURL");

        return await client.GetFromJsonAsync<List<Person>>("/sample-data/person_500.json");
    }

    private GridOptions<Person> GetGridOptions()
    {
        return new GridOptions<Person>()
            {
                HeaderHeight = 60,
                RowHeight = 40,
                GridClass = "cvs-bl-grid",
                SuppressRowClickSelection = false,
                RowMultiSelectWithClick = true, //Enable multiple row selection Deafult to false
                RowSelectionType = RowSelectionType.Multiple
            };
    }

    public void SelectAll()
    {
        _blGridReference.SelectAll();
    }

    public void DeselectAll()
    {
        _blGridReference.DeselectAll();
    }

    public async Task ToggleChecks()
    {
        _showChecks = !_showChecks;

        _gridOptions.CheckboxSelectionColumn = _showChecks;

        await _blGridReference.SetColumnDefsAsync(_gridColumns);
    }

    private List<GridColumn<Person>> GetGridColumns()
    {
        var height = 40;
        var width = 200;
        var canGrow = 1;

        return new List<GridColumn<Person>> {
                        new GridColumn<Person> {
                            ColumnId = 3,
                            HeaderName = "IsActive",
                            DataField = "IsActive",
                            Width= 150,
                            Height= height,
                            CanGrow = canGrow,
                            CellDataFn = (x) => x.RowData.IsActive,
                            AlingContent = AlingContent.Center
                        },
                        new GridColumn<Person> {
                            ColumnId = 5,
                            HeaderName = "Age",
                            DataField = "Age",
                            Width= width,
                            Height= height,
                            CanGrow = canGrow,
                            CellDataFn = (x) => x.RowData.Age,
                            AlingContent = AlingContent.Center
                        },
                        new GridColumn<Person> {
                            ColumnId = 0,
                            HeaderName = "Name",
                            DataField = "Name",
                            Width= width,
                            Height= height,
                            CanGrow = canGrow,
                            CellDataFn = (x) => x.RowData.Name,
                        },
                        new GridColumn<Person> {
                            ColumnId = 1,
                            HeaderName = "Gender",
                            DataField = "Gender",
                            Width= width,
                            Height= height,
                            CanGrow = canGrow,
                            CellDataFn = (x) => x.RowData.Gender
                        },
                        new GridColumn<Person> {
                            ColumnId = 6,
                            HeaderName = "Company",
                            DataField = "Company",
                            Width= width,
                            Height= height,
                            CanGrow = canGrow,
                            CellDataFn = (x) => x.RowData.Company,
                        },
                        new GridColumn<Person> {
                            ColumnId = 7,
                            HeaderName = "Email",
                            DataField = "Email",
                            Width= width,
                            Height= height,
                            CanGrow = canGrow,
                            CellDataFn = (x) => x.RowData.Email,
                        },
                          new GridColumn<Person> {
                            ColumnId = 11,
                            HeaderName = "Phone",
                            DataField = "Phone",
                            Width= width,
                            Height= height,
                            CanGrow = canGrow,
                            CellDataFn = (x) => x.RowData.Phone
                        },
                           new GridColumn<Person> {
                            ColumnId = 12,
                            HeaderName = "Address",
                            DataField = "Address",
                            Width= width,
                            Height= height,
                            CanGrow = canGrow,
                            CellDataFn = (x) => x.RowData.Address
                        }

        };
    }
}