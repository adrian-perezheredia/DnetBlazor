@page "/ConnectedPanel"

@using Dnet.App.Shared.Infrastructure.Entities
@using Dnet.App.Shared.Infrastructure.Models
@using Dnet.App.Shared.Shared.CustomComponents
@using Dnet.Blazor.Components.ConnectedPanel.Infrastructure.Models
@using Dnet.Blazor.Components.Grid.Infrastructure.Enums
@using Dnet.Blazor.Components.Overlay.Infrastructure.Enums
@using Dnet.Blazor.Components.Overlay.Infrastructure.Interfaces
@using Dnet.Blazor.Components.Overlay.Infrastructure.Models
@using Dnet.Blazor.Components.Overlay.Infrastructure.Services
@using Dnet.Blazor.Infrastructure.Models.SearchModels
@using Dnet.Blazor.Infrastructure.Models.SearchModels.FilterModels
@using Microsoft.AspNetCore.Components.Web
@using Dnet.Blazor.Components.ConnectedPanel.Infrastructure.Interfaces

@inject IConnectedPanelService ConnectedPanelService

@implements IDisposable

<div class="container-fluid" style="padding-top: 10px;">
	<div class="d-flex dnet-page-content-left-margin dnet-m-t-20">
		<span class="dnet-m-r-10  dnet-app-comp-name">Connected Panel</span>
	</div>
	 <div class="d-flex dnet-page-content-left-margin dnet-m-t-20 dnet-page-doc-text">
        <span class="dnet-m-r-10">Connected Panel makes it easy to dynamically position a component relative to another element in the DOM used for reference. You can inject any blazor component inside the Connected Panel</span>
    </div>
	<div class="d-flex dnet-page-content-left-margin dnet-m-t-30">
		<span class="dnet-m-r-10">Click to show filter</span>
		<svg @ref="_menuTrigger" 
		     style="cursor: pointer" 
		     @onclick="ToggleMenu" 
		     class="bi bi-filter" 
		     width="1.5em" 
		     height="1.5em" 
		     viewBox="0 0 16 16" 
		     fill="currentColor" 
		     xmlns="http://www.w3.org/2000/svg">
			<path fill-rule="evenodd" d="M6 10.5a.5.5 0 01.5-.5h3a.5.5 0 010 1h-3a.5.5 0 01-.5-.5zm-2-3a.5.5 0 01.5-.5h7a.5.5 0 010 1h-7a.5.5 0 01-.5-.5zm-2-3a.5.5 0 01.5-.5h11a.5.5 0 010 1h-11a.5.5 0 01-.5-.5z" clip-rule="evenodd" />
		</svg>
	</div>
</div>


@code {

	private ElementReference _menuTrigger;

	private OverlayReference _overlayReference;

	private void ToggleMenu()
	{
		var filterModel = new AdvancedFilterModel
		{
			AdditionalOperator = FilterOperator.None,
			AdditionalValue = null,
			Column = "Name",
			Condition = FilterCondition.None,
			Operator = FilterOperator.None,
			Type = CellDataType.Date,
			Value = null
		};

		var panelConfig = new ConnectedPanelConfig()
        {
            Width = "300px",
            Height = "430px",
			ConnectedPanelClasses = "test-class"
        };

		var parameters = new Dictionary<string, object>();

		parameters.Add("FilterData", filterModel);

		_overlayReference = ConnectedPanelService.ToggleMenu(typeof(ConnectedPanelTestContent), parameters, _menuTrigger, panelConfig);

		_overlayReference.Close += CloseConnectedPanel;
	}

	void CloseConnectedPanel(OverlayResult overlayDataResult)
	{
		var resultData = overlayDataResult.CloseReason == CloseReason.Ok ? overlayDataResult.ComponentData.ToString() : "";

		StateHasChanged();
	}

	public void Dispose()
	{
		if (_overlayReference != null) _overlayReference.Close -= CloseConnectedPanel;
	}
}



