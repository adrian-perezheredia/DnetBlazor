@page "/List"

@using System.Drawing
@using Dnet.App.Shared.Infrastructure.Entities
@using Dnet.App.Shared.Infrastructure.Models
@using Dnet.App.Shared.Infrastructure.Services
@using Dnet.Blazor.Components.Form
@using Dnet.Blazor.Components.List
@using Dnet.Blazor.Components.Checkbox
@using System.Net.Http
@using System.Net.Http.Json
@using Dnet.Blazor.Components.Select
@using Dnet.Blazor.Infrastructure.Models.SearchModels

@inject HttpClient HttpClient
@inject IHttpClientFactory ClientFactory
@inject IApplicationServiceService ApplicationServiceService


<div class="container-fluid" style="padding-top: 10px;">
    <div class="d-flex dnet-page-content-left-margin dnet-m-t-20">
        <span class="dnet-m-r-10 dnet-app-comp-name">List View</span>
    </div>
    <div class="dnet-page-content-left-margin dnet-m-t-20">
        <EditForm Model="@_formData1">
            <DataAnnotationsValidator />
            <div style="display: flex; flex-direction: column">
                <div
                    style="display:flex;align-items: center;flex-direction: row;justify-content:space-between;max-width: 300px;">
                    <DnetFormField Label="List options" IsRequired="true">
                        <ChildContent>
                            <DnetSelect Value="@_formData1.Value" TValue="string"
                                ValueChanged="@((string e) => MyValueChangeHandler(e))"
                                ValueExpression="@( () => _formData1.Value )" Items="_features"
                                TItem="KeyValueModel<int>" DisplayValueConverter="(value) => (value.Value)"
                                OnSelectionChanged="SelectionChanged" InputTextToUpper="true"
                                PlaceHolder="List features" MultiSelect="true"
                                SelectedItems="@_selectedFeatures"
                                IsSelectedFn="@( (item, itemSelected) => item.Key == itemSelected.Key )">
                            </DnetSelect>
                        </ChildContent>
                        <ErrorContent>
                            <ValidationMessage For="@(() => _formData1.Key)" />
                        </ErrorContent>
                    </DnetFormField>
                </div>
            </div>
        </EditForm>
    </div>
    <div class="dnet-page-content-left-margin dnet-m-t-20 dnet-list-size">
        <DnetList TItem="Person" @ref="_listComponent" Items="_items" OnPaginationChanged="PaginationChanged"
            OnCheckboxClick="CheckboxClick" OnSelectionChange="SelectionChanged" ListOptions="@_listOptions">
            @* <ListItemContent Context="Person">
                <div style="display: flex; width: 100%; padding-right: 5px">
                    <span>@Person.Name</span>
                </div>
            </ListItemContent> *@
            <ItemPrefixContent Context="Person">
                <div class="dnet-app-icon-wrapper">
                    <span
                        class="dnet-app-icon @(Person.Gender == "female" ? "dnet-app-formfield-female" : "dnet-app-formfield-male") "></span>
                </div>
            </ItemPrefixContent>
        </DnetList>
    </div>
</div>


@code {

    private List<Person> _items = new();

    private List<KeyValueModel<int>> _features = new();

    private List<KeyValueModel<int>> _selectedFeatures = new();

    private DnetList<Person> _listComponent { get; set; }

    private KeyValueModel<int> _formData1 = new();

    private ListOptions<Person> _listOptions { get; set; }

    private SearchModel _searchModel { get; set; } = new();


    protected override void OnInitialized()
    {
        _listOptions = GetListOptions();
        _listOptions.HeaderText = "Availables";
    }

    protected override async Task OnInitializedAsync()
    {
        var searchModel = new SearchModel
            {
                SortModel = new SortModel
                {
                    Order = SortOrder.Ascending,
                    ColumnName = "Name"
                },
                PaginationModel = new PaginationModel()
                {
                    PageSize = _listOptions.PageSize,
                    CurrentPage = 1,
                }
            };

        _searchModel = searchModel;

        var items = await GetPersons();

        var paginatedItems = items.Skip((searchModel.PaginationModel.CurrentPage - 1) * searchModel.PaginationModel.PageSize)
        .Take(searchModel.PaginationModel.PageSize).ToList();

        _items.AddRange(items);

        _listComponent.SetRowData(items, items.Count, 1);

        _features = GetKeyValueModels();

        _selectedFeatures = _features.Where(p => p.Key == 5 || p.Key == 6).Select(p => p).ToList();

        StateHasChanged();
    }

    private async Task<List<Person>> GetPersons()
    {
        var dataPersons = await ApplicationServiceService.GetPersons();

        return dataPersons;
    }

    private void SelectionChanged(List<Person> selectedItems)
    {
        var tt = selectedItems;
    }

    private async Task PaginationChanged(SearchModel searchModel)
    {
        var items = await GetPersons();

        var paginatedItems = items.Skip((searchModel.PaginationModel.CurrentPage - 1) * searchModel.PaginationModel.PageSize)
        .Take(searchModel.PaginationModel.PageSize).ToList();

        _listComponent.SetRowData(paginatedItems, items.Count);
    }

    private void CheckboxClick(Person item)
    {

    }

    private void MyValueChangeHandler(string item)
    {
        _formData1.Value = item;
    }

    private void SelectionChanged(List<KeyValueModel<int>> items)
    {
        _listOptions.EnablePagingination = items.FirstOrDefault(p => p.Key == 1) != null;
        _listOptions.EnableSearching = items.FirstOrDefault(p => p.Key == 2) != null;
        _listOptions.CheckboxSelectionColumn = items.FirstOrDefault(p => p.Key == 3) != null;
        _listOptions.ShowHeader = items.FirstOrDefault(p => p.Key == 5) != null;
        _listOptions.ShowFooter = items.FirstOrDefault(p => p.Key == 6) != null;
    }

    private List<KeyValueModel<int>> GetKeyValueModels()
    {
        var keyValueModels = new List<KeyValueModel<int>>
{
new KeyValueModel<int> { Key = 1, Value = "Enable pagination" },
new KeyValueModel<int> { Key = 2, Value = "Enable searching" },
new KeyValueModel<int> { Key = 3, Value = "Enable checkbox selection" },
new KeyValueModel<int> { Key = 4, Value = "Enable sorting" },
new KeyValueModel<int> { Key = 5, Value = "Show header" },
new KeyValueModel<int> { Key = 6, Value = "Show footer" }
};

        return keyValueModels;
    }

    private ListOptions<Person> GetListOptions()
    {
        return new ListOptions<Person>()
            {
                DisplayValueConverter = (value) => value.Name,
                SupportTextValueConverter = (value) => value.Address,
                SortedData = (value) => value.Name,
                SearchValueConverter = (value) => value.Name,
                DisableItem = (value) => value.IsActive,
                HeaderText = "",
                ItemSize = 40f,
                MultiSelect = true,
                DebounceTime = 250,
                EnableServerSide = false,
                EnableSearching = true,
                EnableSorting = true,
                PageSize = 5,
                EnablePagingination = false,
                CheckboxSelectionColumn = true,
                ShowHeader = false,
                ShowFooter = true,
                ServerSideSearchColumns = new List<string>() { "Name", "LastName" },
                ServerSideSortColumn = "Name"
            };
    }
}
