@page "/Forms"

@using System.Drawing
@using Dnet.App.Shared.Infrastructure.Entities
@using Dnet.App.Shared.Infrastructure.Services
@using Dnet.Blazor.Components.Form
@using Dnet.Blazor.Components.FormField;
@using Dnet.Blazor.Components.Select
@using Dnet.Blazor.Components.Autocomplete
@using Dnet.Blazor.Infrastructure.Services
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Web;
@using System.ComponentModel.DataAnnotations

@inject IApplicationServiceService ApplicationServiceService


<div class="container-fluid" style="padding-top: 10px;">
    <div class="d-flex dnet-m-l-30 dnet-m-t-20">
        <span class="dnet-m-r-10 dnet-app-comp-name">Forms Field</span>
    </div>
    <EditForm EditContext="@_editContext" style="display: flex;flex-direction:column">
        <DataAnnotationsValidator />
        <div class="d-flex dnet-m-l-30 dnet-m-t-30">
            <div style="margin-right:100px; width: 250px;">
                <DnetFormFieldPlainCmp PlaceHolder="Ex. John" Label="LastName" UseClearButton="true" IsRequired="true">
                    <PrefixContent>
                        <div class="dnet-app-icon-wrapper">
                            <span class="dnet-app-icon dnet-app-formfield-headphones"></span>
                        </div>
                    </PrefixContent>
                    <ChildContent>
                        <DnetInputTextCmp @bind-Value="_person.LastName" PlaceHolder="Ex. MyCompany" type="text">
                        </DnetInputTextCmp>
                    </ChildContent>
                    <HintContent>You can add the country prefix</HintContent>
                    <SufixContent>
                        €
                    </SufixContent>
                    <ErrorContent>
                        <ValidationMessage For="@(() => _person.LastName)" />
                    </ErrorContent>
                </DnetFormFieldPlainCmp>
            </div>
        </div>
        <div class="d-flex dnet-m-l-30 dnet-m-t-10">
            <div style="margin-right:100px; width: 250px;">
                <DnetFormFieldPlainCmp PlaceHolder="Ex. John" Label="Email" UseClearButton="true" IsRequired="true">
                    <ChildContent>
                        <DnetInputTextCmp @bind-Value="_person.Email" PlaceHolder="Ex. Email" type="text">
                        </DnetInputTextCmp>
                    </ChildContent>
                    <ErrorContent>
                        <ValidationMessage For="@(() => _person.Email)" />
                    </ErrorContent>
                </DnetFormFieldPlainCmp>
            </div>
        </div>
        <div class="d-flex dnet-m-l-30 dnet-m-t-10">
            <div style="margin-right:100px; width: 250px;">
                <DnetFormFieldPlainCmp PlaceHolder="Gender" Label="Gender" IsRequired="true">
                    <ChildContent>
                        <DnetGenericSelectCmp TValue="string" @bind-Value="_person.Gender" Items="_genders"
                            TItem="Gender" DisplayValueConverter="(value) => (value.Name)"
                            ValueConverter="(value) => (value.Name)" OnItemSelected="ApiResource1ItemSelected"
                            PlaceHolder="Api Resource" Label="Api Resource" BorderRadius="5px" MarginTop="5px"
                            Appearance="Appearance.Fill">
                        </DnetGenericSelectCmp>
                    </ChildContent>
                    <ErrorContent>
                        <ValidationMessage For="@(() => _person.Gender)" />
                    </ErrorContent>
                </DnetFormFieldPlainCmp>
            </div>
        </div>
        <div class="d-flex dnet-m-l-30 dnet-m-t-10">
            <div style="margin-right:100px; width: 250px;">
                <DnetFormFieldPlainCmp PlaceHolder="Jhon Doe" Label="Name" IsRequired="true" UseClearButton="true">
                    <ChildContent>
                        <DnetAutocompleteCmp TValue="string" @bind-Value="@_person.Name" Items="_items" TItem="Person"
                            DisplayValueConverter="(value) => value.Name" ValueConverter="(value) => (value.Name)"
                            OnItemSelected="OnAutocompleteFilter" InputTextToUpper="true" PlaceHolder="Name"
                            SortBy="@sortBy" FilterBy="@filterBy">
                        </DnetAutocompleteCmp>
                    </ChildContent>
                    <ErrorContent>
                        <ValidationMessage For="@(() => _person.Gender)" />
                    </ErrorContent>
                </DnetFormFieldPlainCmp>
            </div>
        </div>
    </EditForm>
</div>


@code {

    private Person _person { get; set; } = new Person()
        {
            Name = "John",
            LastName = "Doe",
            Email = "john.doe@datalnet.com",
            Phone = "678 89 90 09",
            Age = 34,
            Company = "Datalnet",
            Balance = "90000",
            Address = "597 Frost Street, Brogan, Indiana, 8687",
            Birthday = DateTime.Now,
        };

    private EditContext? _editContext;

    private ValidationMessageStore? messageStore;

    private bool _formInvalid = true;

    private EditContext? _editContext2;

    private List<Gender> _genders = new();

    private Gender _gender { get; set; } = new();

    private List<Person> _items = new List<Person>();

    private DnetAutocomplete<Person> _dnetAutocomplete { get; set; }

    CustomFilter<Person> filterBy = CustomFilter<Person>
    .FilterBy(x => x.Name, CustomFilterOperator.Contains)
    .ThenFilterBy(x => x.Company, CustomFilterOperator.Contains);

    CustomSort<Person> sortBy = CustomSort<Person>
    .ByAscending<string>(x => x.Name)
    .ThenDescending<string>(x => x.LastName);


    protected override void OnInitialized()
    {
        _genders = new List<Gender>()
{
new ()
{
GenderId = 1,
Name = "Female"
},
new ()
{
GenderId = 2,
Name = "Male"
}
};

        _editContext = new EditContext(_person);

        messageStore = new(_editContext);

        _editContext.OnFieldChanged += (data, eventArgs) =>
        {
            _formInvalid = !_editContext.Validate();
            StateHasChanged();
        };

        _editContext.OnValidationRequested += (data, eventArgs) =>
        {
            messageStore?.Clear();

            StateHasChanged();
        };
    }

    protected override async Task OnInitializedAsync()
    {
        _items = await GetPersons();

        StateHasChanged();
    }

    private void ApiResource1ItemSelected(Gender item)
    {
        _person.Gender = item.Name;
    }

    public class Gender
    {
        public int GenderId { get; set; }

        [Required]
        public string Name { get; set; }
    }

    private async Task<List<Person>> GetPersons()
    {
        var dataPersons = await ApplicationServiceService.GetPersons();

        return dataPersons;
    }

    private void OnAutocompleteFilter(Person item)
    {
        var value = item;
    }

    private void MyValueChangeHandler(string item)
    {
        _person.Name = item;
    }

    private async Task StopTyping(string value)
    {
        var items = (await GetPersons()).Where(p => p.Name.ToUpper().Contains(value.ToUpper())).ToList();

        _dnetAutocomplete.UpdateData(items);
    }
}
