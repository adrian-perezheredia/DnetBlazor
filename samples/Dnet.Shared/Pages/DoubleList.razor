@page "/DoubleList"

@using System.Drawing
@using Dnet.App.Shared.Infrastructure.Entities
@using Dnet.App.Shared.Infrastructure.Models
@using Dnet.App.Shared.Infrastructure.Services
@using Dnet.Blazor.Components.Form
@using Dnet.Blazor.Components.List
@using Dnet.Blazor.Components.Checkbox
@using System.Net.Http
@using System.Net.Http.Json
@using Dnet.Blazor.Components.Select

@inject HttpClient HttpClient
@inject IHttpClientFactory ClientFactory
@inject IApplicationServiceService ApplicationServiceService

<div class="container-fluid" style="padding-top: 10px;">
    <div class="d-flex dnet-page-content-left-margin dnet-m-t-20">
        <span class="dnet-m-r-10 dnet-app-comp-name">Double list</span>
    </div>
    <div class="d-flex dnet-page-content-left-margin dnet-m-t-20 dnet-page-doc-text">
        <span class="dnet-m-r-10">Select and use de buttons or Drag&Drop between lists</span>
    </div>
    <div class="dnet-page-content-left-margin dnet-m-t-20">
        <EditForm Model="@_formData1">
            <DataAnnotationsValidator />
            <div style="display:flex;align-items: center;flex-direction: row;justify-content:space-between;max-width: 300px;">
                <DnetFormField PlaceHolder="List options" Label="List options" IsRequired="true">
                    <ChildContent>
                        <DnetSelect Value="@_formData1.Value" TValue="string"
                            ValueChanged="@((string e) => MyValueChangeHandler(e))"
                            ValueExpression="@( () => _formData1.Value )" Items="_features" TItem="KeyValueModel<int>"
                            DisplayValueConverter="(value) => (value.Value)" OnSelectionChanged="SelectionChanged"
                            InputTextToUpper="true" PlaceHolder="List features" Label="List features" MultiSelect="true"
                            SelectedItems="@_selectedFeatures"
                            IsSelectedFn="@( (item, itemSelected) => item.Key == itemSelected.Key )">
                        </DnetSelect>
                    </ChildContent>
                    <ErrorContent>
                        <ValidationMessage For="@(() => _formData1.Key)" />
                    </ErrorContent>
                </DnetFormField>
            </div>
        </EditForm>
    </div>
    <div class="dnet-split-content dnet-page-content-left-margin dnet-m-t-10" style="height:calc(100% - 200px);">
        <div class="dnet-split-content-btn-wrapper">
            <button type="button" class="dnet-split-content-btn" @onclick="ToggleListView">
                @(isActive ? $"Ir a la lista {_rightListOptions.HeaderText} >>" : $"Ir a la lista {_leftListOptions.HeaderText} >>")
            </button>
        </div>
        <div class="dnet-split-content-container" style="">
            <div style="height: 500px; padding-bottom: 20px" class="@($"dnet-split-content-right {(isActive ? "active" : "")}")">
                <DnetList TItem="Person" 
                          @ref="_leftComponent" 
                          Items="_leftItems"
                          OnSelectionChange="LeftSelectionChanged" 
                          OnDrop="LeftDrop" 
                          ListOptions="@_leftListOptions"
                          OnTransfer="LeftTransfer">
                    @* <ListItemContent Context="Person">
                        <div class="dnet-list-item-content">
                            @Person.Name @Person.IsActive
                        </div>
                    </ListItemContent> *@
                    <ItemPrefixContent Context="Person">
                        <div class="dnet-app-icon-wrapper">
                            <span
                                class="dnet-app-icon @(Person.Gender == "female" ? "dnet-app-formfield-female" : "dnet-app-formfield-male") "></span>
                        </div>
                    </ItemPrefixContent>
                </DnetList>
            </div>
            <div class="dnet-double-list-controls">
                <div style="width: 25px">
                    <button type="button" class="dnet-app-icon-button" @onclick="(e => LeftToRight())">
                        <svg width="1em" height="1.1em" viewBox="0 0 16 16"
                            fill="@(_leftSelectedItems.Any()  ? "#4fc3f7" : "grey" )"
                            xmlns="http://www.w3.org/2000/svg">
                            <path fill-rule="evenodd"
                                d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z"
                                clip-rule="evenodd" />
                        </svg>
                    </button>
                    <button type="button" class="dnet-app-icon-button" @onclick="(e => RightToLeft())">
                        <svg width="1em" height="1.1em" viewBox="0 0 16 16"
                            fill="@(_rightSelectedItems.Any() ? "#4fc3f7" : "grey" )"
                            xmlns="http://www.w3.org/2000/svg">
                            <path fill-rule="evenodd"
                                d="M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z"
                                clip-rule="evenodd" />
                        </svg>
                    </button>
                </div>
            </div>
            <div style="height: 500px; padding-bottom: 20px" class="@($"dnet-split-content-left {(!isActive ? "active" : "")}")">
                <DnetList TItem="Person" 
                          @ref="_rightComponent" 
                          Items="_rightItems"
                          OnSelectionChange="RightSelectionChanged" 
                          OnDrop="RightDrop" 
                          ListOptions="@_rightListOptions"
                          OnTransfer="RightTransfer">
                    @* <ListItemContent Context="Person">
                        <div class="dnet-list-item-content">
                            @Person.Name @Person.IsActive
                        </div>
                    </ListItemContent> *@
                    <ItemPrefixContent Context="Person">
                        <div class="dnet-app-icon-wrapper">
                            <span
                                class="dnet-app-icon @(Person.Gender == "female" ? "dnet-app-formfield-female" : "dnet-app-formfield-male") "></span>
                        </div>
                    </ItemPrefixContent>
                </DnetList>
            </div>
        </div>
    </div>
</div>


@code {
    private List<Person> _leftItems = new();

    private List<Person> _leftBkItems = new();

    private List<Person> _leftSelectedItems = new();

    private List<Person> _leftAddedItems = new();

    private List<Person> _leftRemovedItems = new();

    private List<Person> _rightItems = new();

    private List<Person> _rightBkItems = new();

    private List<Person> _rightSelectedItems = new();

    private List<Person> _rightAddedItems = new();

    private List<Person> _rightRemovedItems = new();

    private DnetList<Person> _leftComponent { get; set; }

    private DnetList<Person> _rightComponent { get; set; }

    private List<KeyValueModel<int>> _features = new();

    private List<KeyValueModel<int>> _selectedFeatures = new();

    private KeyValueModel<int> _formData1 = new();

    private ListOptions<Person> _leftListOptions { get; set; } = new();

    private ListOptions<Person> _rightListOptions { get; set; } = new();

    private bool isActive { get; set; } = true;


    protected override void OnInitialized()
    {
        _leftListOptions = GetListOptions();
        _leftListOptions.HeaderText = "Left";
        _leftListOptions.ContainerName = "LeftContainer";
        _leftListOptions.ConnectedTo = "RghtContainer";

        _rightListOptions = GetListOptions();
        _rightListOptions.HeaderText = "Right";
        _rightListOptions.ContainerName = "RghtContainer";
        _rightListOptions.ConnectedTo = "LeftContainer";
    }


    protected override async Task OnInitializedAsync()
    {
        var itemsToTake = 5;

        var items = await GetPersons();

        _leftItems = items.Take(itemsToTake).ToList();

        _leftBkItems = items.Take(itemsToTake).ToList();

        _rightItems = items.Skip(itemsToTake).Take(itemsToTake).ToList();

        _rightBkItems = items.Skip(itemsToTake).Take(itemsToTake).ToList();

        _features = GetKeyValueModels();

        _selectedFeatures = _features.Where(p => p.Key == 5 || p.Key == 6 || p.Key == 1 || p.Key == 3).Select(p => p).ToList();

        StateHasChanged();
    }

    private async Task<List<Person>> GetPersons()
    {
        var dataPersons = await ApplicationServiceService.GetPersons();

        return dataPersons;
    }

    private void LeftSelectionChanged(List<Person> selectedItems)
    {
        _leftSelectedItems = selectedItems;
    }

    private void RightSelectionChanged(List<Person> selectedItems)
    {
        _rightSelectedItems = selectedItems;
    }

    private void MyValueChangeHandler(string item)
    {
        _formData1.Value = item;
    }

    private void LeftDrop(List<Person> selectedItems)
    {
        _rightSelectedItems = selectedItems;
        RightToLeft();
    }

    private void RightDrop(List<Person> selectedItems)
    {
        _leftSelectedItems = selectedItems;
        LeftToRight();
    }

    private void LeftTransfer(Person item)
    {
        _leftSelectedItems = new List<Person>() { item };
        LeftToRight();
    }

    private void RightTransfer(Person item)
    {
        _rightSelectedItems = new List<Person>() { item };
        RightToLeft();
    }

    private void LeftToRight()
    {
        if (!_leftSelectedItems.Any()) return;

        _rightItems.AddRange(_leftSelectedItems);

        foreach (var item in _leftSelectedItems)
        {
            _leftItems.Remove(item);
        }

        _leftSelectedItems = new();

        _leftAddedItems = _leftItems.Except(_leftBkItems, new PersonEqualityComparer()).ToList();

        _leftRemovedItems = _leftBkItems.Except(_leftItems, new PersonEqualityComparer()).ToList();

        _rightAddedItems = _rightItems.Except(_rightBkItems, new PersonEqualityComparer()).ToList();

        _rightRemovedItems = _rightBkItems.Except(_rightItems, new PersonEqualityComparer()).ToList();

        _rightComponent.SetRowData(_rightItems);

        _leftComponent.SetRowData(_leftItems);
    }

    private void RightToLeft()
    {
        if (!_rightSelectedItems.Any()) return;

        _leftItems.AddRange(_rightSelectedItems);

        foreach (var item in _rightSelectedItems)
        {
            _rightItems.Remove(item);
        }

        _rightSelectedItems = new();

        _leftAddedItems = _leftItems.Except(_leftBkItems, new PersonEqualityComparer()).ToList();

        _leftRemovedItems = _leftBkItems.Except(_leftItems, new PersonEqualityComparer()).ToList();

        _rightAddedItems = _rightItems.Except(_rightBkItems, new PersonEqualityComparer()).ToList();

        _rightRemovedItems = _rightBkItems.Except(_rightItems, new PersonEqualityComparer()).ToList();

        _rightComponent.SetRowData(_rightItems);

        _leftComponent.SetRowData(_leftItems);
    }

    private ListOptions<Person> GetListOptions()
    {
        return new ListOptions<Person>()
            {
                DisplayValueConverter = (value) => value.Name,
                SortedData = (value) => value.Name,
                SearchValueConverter = (value) => value.Name,
                DisableItem = (value) => value.IsActive,
                HeaderText = "",
                ItemSize = 40f,
                MultiSelect = true,
                DebounceTime = 250,
                EnableServerSide = false,
                EnableSearching = false,
                EnableSorting = false,
                PageSize = 50,
                EnablePagingination = true,
                CheckboxSelectionColumn = true,
                ShowHeader = true,
                ShowFooter = true,
            };
    }

    private void SelectionChanged(List<KeyValueModel<int>> items)
    {
        _leftListOptions.EnablePagingination = _rightListOptions.EnablePagingination = items.FirstOrDefault(p => p.Key == 1) !=
        null;
        _leftListOptions.EnableSearching = _rightListOptions.EnableSearching = items.FirstOrDefault(p => p.Key == 2) != null;
        _leftListOptions.CheckboxSelectionColumn = _rightListOptions.CheckboxSelectionColumn = items.FirstOrDefault(p => p.Key
        == 3) != null;
        _leftListOptions.ShowHeader = _rightListOptions.ShowHeader = items.FirstOrDefault(p => p.Key == 5) != null;
        _leftListOptions.ShowFooter = _rightListOptions.ShowFooter = items.FirstOrDefault(p => p.Key == 6) != null;
    }

    private List<KeyValueModel<int>> GetKeyValueModels()
    {
        var keyValueModels = new List<KeyValueModel<int>>
{
new KeyValueModel<int> { Key = 1, Value = "Enable pagination" },
new KeyValueModel<int> { Key = 2, Value = "Enable searching" },
new KeyValueModel<int> { Key = 3, Value = "Enable checkbox selection" },
new KeyValueModel<int> { Key = 4, Value = "Enable sorting" },
new KeyValueModel<int> { Key = 5, Value = "Show header" },
new KeyValueModel<int> { Key = 6, Value = "Show footer" }
};

        return keyValueModels;
    }

    private void ToggleListView()
    {
        isActive = !isActive;
    }

    public class PersonEqualityComparer : IEqualityComparer<Person>
    {
        public bool Equals(Person x, Person y)
        {
            if (x == null || y == null)
                return false;

            if (ReferenceEquals(x, y)) return true;

            x.PersonId = x.PersonId ?? string.Empty;

            y.PersonId = y.PersonId ?? string.Empty;

            return x.PersonId.Equals(y.PersonId);
        }

        public int GetHashCode(Person obj)
        {
            int hashPersonId = obj.PersonId == null ? 0 : obj.PersonId.GetHashCode();

            return hashPersonId;
        }
    }
}

    @* <div class="dnet-m-t-10">
                    <div class="dnet-m-b-5">
                        <span>Added: </span>
                        <span>@_leftAddedItems.Count()</span>
                    </div>
                    <div>
                        <span>Removed: </span>
                        <span>@_leftRemovedItems.Count()</span>
                    </div>
                </div> *@

                   @* <div class="dnet-m-t-10">
                    <div class="dnet-m-b-5">
                        <span>Added: </span>
                        <span>@_rightAddedItems.Count()</span>
                    </div>
                    <div>
                        <span>Removed: </span>
                        <span>@_rightRemovedItems.Count()</span>
                    </div>
                </div> *@