@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components
@using System.Linq.Expressions

@implements IDisposable

@inject IFormEventService FormEventService

<div class="dnet-form-field-plain-wrapper">
    @if (!string.IsNullOrEmpty(Label))
    {
        <div class="dnet-form-field-header">
            <div class="dnet-form-field-plain-label-wrapper">
                <label class="dnet-form-field-plain-label">@Label</label>
                @if (IsRequired)
                {
                    <span aria-hidden="true"
                          class="dnet-floating-label--required">
                    </span>
                }
            </div>
            @if (_maxCharacters > 0)
            {
                <div class="dnet-form-field-char-counter">
                    @_characterCount / @_maxCharacters
                </div>
            }
        </div>
    }
    <div class="dnet-form-field-plain-control-container @(_disabled ? "dnet-control-disable" : null)" @ref="_formField">
        @if (PrefixContent != null)
        {
            <div class="dnet-form-field-plain-prefix">
                @PrefixContent
            </div>
        }
        <div class="dnet-form-field-plain-control">
            <CascadingValue Value="_formFieldCascadingValues">
                @ChildContent
            </CascadingValue>
        </div>
        @if (_useClearButton == true)
        {
            @if (!string.IsNullOrEmpty(_currentValue))
            {
                <div class="dnet-component-icon-wrapper" @onclick="ClearInput">
                    <span class="dnet-component-icon dnet-component-clear-button"></span>
                </div>
            }
            else
            {
                <div class="dnet-component-icon-wrapper" @onclick="ClearInput">
                    <span class="dnet-component-icon"></span>
                </div>
            }
        }
        @if (SufixContent != null)
        {
            <div class="dnet-form-field-plain-suffix" @onclick="SufixContentClicked">
                @SufixContent
            </div>
        }
    </div>
    <div class="dnet-form-field-plain-info">
        @if (_hasErrors)
        {
            <div class="dnet-error">
                @ErrorContent
            </div>
        }
        else
        {
            <div class="dnet-form-field-hint-wrapper">
                <div class="dnet-hint">
                    @HintContent
                </div>
            </div>
        }
    </div>
</div>

@code {

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public RenderFragment? PrefixContent { get; set; }

    [Parameter]
    public RenderFragment? SufixContent { get; set; }

    [Parameter]
    public RenderFragment? HintContent { get; set; }

    [Parameter]
    public RenderFragment? ErrorContent { get; set; }

    [Parameter]
    public bool UseClearButton { get; set; } = false;

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public bool IsRequired { get; set; }


    private string? _currentValue { get; set; }

    private bool _hasErrors { get; set; }

    private bool _hasFocus { get; set; }

    private bool _useClearButton { get; set; }

    private bool _disabled { get; set; }

    private Tuple<int, int> _countData { get; set; } = new Tuple<int, int>(0, 0);

    private ElementReference _formField;

    private FormFieldCascadingValues? _formFieldCascadingValues { get; set; }

    private int _characterCount => _currentValue?.Length ?? 0;

    private int _maxCharacters { get; set; }


    protected override void OnInitialized()
    {
        _formFieldCascadingValues = new FormFieldCascadingValues()
            {
                FormEventService = FormEventService,
            };

        FormEventService.OnError += HandleError;

        FormEventService.OnFocus += HandleFocus;

        FormEventService.OnCurrentValue += HandleCurrentValue;

        FormEventService.OnDisabled += HandleDisabled;

        FormEventService.OnCharCount += CharCount;

        _useClearButton = UseClearButton;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender) return;

        _formFieldCascadingValues.FormField = _formField;
    }

    private void HandleError(bool hasError)
    {
        _hasErrors = hasError;

        StateHasChanged();
    }

    private void HandleFocus(bool hasFocus)
    {
        _hasFocus = hasFocus;

        StateHasChanged();
    }

    private void HandleCurrentValue(string? currentValue)
    {
        _currentValue = currentValue;

        StateHasChanged();
    }

    private void ClearInput()
    {
        if (_disabled) return;

        FormEventService.RaiseClearContent();
    }

    private void SufixContentClicked()
    {
        FormEventService.RaiseSufixContentClicked();
    }

    private void HandleDisabled(bool isDisabled)
    {
        _disabled = isDisabled;

        StateHasChanged();
    }

    private void CharCount(Tuple<int, int> countData)
    {
        _maxCharacters = countData.Item2;

        StateHasChanged();
    }

    public void Dispose()
    {
        FormEventService.OnError -= HandleError;

        FormEventService.OnFocus -= HandleFocus;

        FormEventService.OnCurrentValue -= HandleCurrentValue;

        FormEventService.OnDisabled -= HandleDisabled;
    }
}
