@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using System.Diagnostics.CodeAnalysis
@using System.Globalization
@using System.Diagnostics
@using Dnet.Blazor.Infrastructure.Services.CssBuilder
@using System.Timers

@typeparam TValue

@inherits Dnet.Blazor.Infrastructure.Forms.DnetInputBase<TValue>

@implements IDisposable

@inject IJSRuntime JSRuntime

@if (!ImmediateResponse)
{
    <input @ref="__inputReference "
           @attributes="AdditionalAttributes"
           class="@_inputTextClass"
           value="@BindConverter.FormatValue(CurrentValueAsString)"
           @onchange="HandleChange"
           @onfocus=@(() => Focus())
           @onblur=@(() => Blur())
           placeholder="@_placeHolder"
           disabled="@Disabled"
           type="datetime" />
}
else
{
    <input @ref="__inputReference"
           @attributes="AdditionalAttributes"
           class="@_inputTextClass"
           @bind="CurrentValueAsString"
           @bind:event="oninput"
           @onkeyup="ResetTimer"
           @onkeyup:stopPropagation="true"
           @onkeyup:preventDefault="true"
           @onfocus=@(() => Focus())
           @onblur=@(() => Blur())
           placeholder="@_placeHolder"
           disabled="@Disabled"
           type="datetime" />
}


@code {

    [CascadingParameter]
    private FormFieldCascadingValues? _formFieldCascadingValues { get; set; }

    [Parameter]
    public EventCallback<bool> OnClearInput { get; set; }

    [Parameter]
    public EventCallback<string> OnStopTyping { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public string PlaceHolder { get; set; }

    [Parameter]
    public bool ImmediateResponse { get; set; } = true;

    [DisallowNull]
    public ElementReference? __inputReference { get; protected set; }

    [Parameter]
    public int DebounceTime { get; set; } = 300;

    [Parameter]
    public InputDateType Type { get; set; } = InputDateType.Date;

    [Parameter]
    public string ParsingErrorMessage { get; set; } = string.Empty;

    [Parameter]
    public bool IsRequired { get; set; }


    private bool _hasFocus { get; set; }

    private bool _hasErrors { get; set; }

    private string _placeHolder { get; set; }

    private Timer _debounceTimer;

    private IFormEventService _formEventService { get; set; }

    private string _inputTextClass =>
                new CssBuilder("mat-input-element")
                    .AddClass(CssClass)
                .Build();

    private const string DateFormat = "yyyy-MM-dd";                     // Compatible with HTML 'date' inputs
    private const string DateTimeLocalFormat = "yyyy-MM-ddTHH:mm:ss";   // Compatible with HTML 'datetime-local' inputs
    private const string MonthFormat = "yyyy-MM";                       // Compatible with HTML 'month' inputs
    private const string TimeFormat = "HH:mm:ss";                       // Compatible with HTML 'time' inputs

    private string _typeAttributeValue = default!;
    private string _format = default!;
    private string _parsingErrorMessage = default!;

    public DnetInputDateCmp()
    {
        var type = Nullable.GetUnderlyingType(typeof(TValue)) ?? typeof(TValue);

        if (type != typeof(DateTime) &&
            type != typeof(DateTimeOffset) &&
            type != typeof(DateOnly) &&
            type != typeof(TimeOnly))
        {
            throw new InvalidOperationException($"Unsupported {GetType()} type param '{type}'.");
        }
    }

    protected override void OnInitialized()
    {
        _formEventService = _formFieldCascadingValues.FormEventService;

        if (ImmediateResponse)
        {
            _debounceTimer = new Timer(DebounceTime);

            _debounceTimer.Elapsed += HandleChangeDebouncedDiscard;

            _debounceTimer.AutoReset = false;
        }

        if (!string.IsNullOrEmpty(CurrentValueAsString))
        {
            _hasFocus = true;

            if (_formEventService is not null) _formEventService.RaiseFocus(_hasFocus);
        }

        if (_formEventService is not null) _formEventService.RaiseCurrentValue(CurrentValueAsString);

        if (_formEventService is not null) _formEventService.OnClearContent += HandleClearContent;

        if (EditContext is not null)
        {
            EditContext.OnFieldChanged += HandleOnValidationStateChanged;
        }
    }

    protected override void OnParametersSet()
    {
        (_typeAttributeValue, _format, var formatDescription) = Type switch
        {
            InputDateType.Date => ("date", DateFormat, "date"),
            InputDateType.DateTimeLocal => ("datetime-local", DateTimeLocalFormat, "date and time"),
            InputDateType.Month => ("month", MonthFormat, "year and month"),
            InputDateType.Time => ("time", TimeFormat, "time"),
            _ => throw new InvalidOperationException($"Unsupported {nameof(InputDateType)} '{Type}'.")
        };

        _parsingErrorMessage = string.IsNullOrEmpty(ParsingErrorMessage)
            ? $"The {{0}} field must be a {formatDescription}."
            : ParsingErrorMessage;
    }

    public void HandleChangeDebouncedDiscard(Object source, ElapsedEventArgs e)
    {
        _ = HandleChangeDebounced(e);
    }

    private async Task HandleChangeDebounced(ElapsedEventArgs e)
    {
        await InvokeAsync(async () =>
        {
            if (_formEventService is not null) _formEventService.RaiseCurrentValue(CurrentValueAsString);

            await OnStopTyping.InvokeAsync(CurrentValueAsString);
        });
    }

    private void ResetTimer(KeyboardEventArgs data)
    {
        _debounceTimer.Stop();

        _debounceTimer.Start();
    }

    private void HandleChange(ChangeEventArgs e)
    {
        CurrentValueAsString = e.Value.ToString();

        if (_formEventService is not null) _formEventService.RaiseCurrentValue(CurrentValueAsString);
    }

    private void Focus()
    {
        _hasFocus = true;

        _placeHolder = PlaceHolder;

        if (_formEventService is not null) _formEventService.RaiseFocus(_hasFocus);

        StateHasChanged();
    }

    private void Blur()
    {
        if (string.IsNullOrEmpty(CurrentValueAsString))
        {
            _hasFocus = false;

            if (_formEventService is not null) _formEventService.RaiseFocus(_hasFocus);
        }

        _placeHolder = string.Empty;

        if (EditContext is not null)
        {
            _hasErrors = EditContext.GetValidationMessages(FieldIdentifier).Any();

            if (_formEventService is not null) _formEventService.RaiseError(_hasErrors && EditContext.IsModified(FieldIdentifier));
        }

        StateHasChanged();
    }

    private void HandleOnValidationStateChanged(object sender, FieldChangedEventArgs? args)
    {
        if (EditContext is not null)
        {
            _hasErrors = EditContext.GetValidationMessages(FieldIdentifier).Any();

            if (_formEventService is not null) _formEventService.RaiseError(_hasErrors && EditContext.IsModified(FieldIdentifier));
        }
    }

    protected override string FormatValueAsString(TValue? value)
        => value switch
        {
            DateTime dateTimeValue => BindConverter.FormatValue(dateTimeValue, _format, CultureInfo.InvariantCulture),
            DateTimeOffset dateTimeOffsetValue => BindConverter.FormatValue(dateTimeOffsetValue, _format, CultureInfo.InvariantCulture),
            DateOnly dateOnlyValue => BindConverter.FormatValue(dateOnlyValue, _format, CultureInfo.InvariantCulture),
            TimeOnly timeOnlyValue => BindConverter.FormatValue(timeOnlyValue, _format, CultureInfo.InvariantCulture),
            _ => string.Empty, // Handles null for Nullable<DateTime>, etc.
        };

    protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out TValue result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        if (BindConverter.TryConvertTo(value, CultureInfo.InvariantCulture, out result))
        {
            Debug.Assert(result != null);
            validationErrorMessage = null;
            return true;
        }
        else
        {
            validationErrorMessage = string.Format(CultureInfo.InvariantCulture, _parsingErrorMessage, DisplayName ?? FieldIdentifier.FieldName);
            return false;
        }
    }

    private async void HandleClearContent()
    {
        CurrentValue = default;

        if (EditContext is not null)
        {
            EditContext?.NotifyFieldChanged(FieldIdentifier);

            _hasErrors = EditContext.GetValidationMessages(FieldIdentifier).Any();

            if (_formEventService is not null) _formEventService.RaiseError(_hasErrors && EditContext.IsModified(FieldIdentifier));
        }

        await ValueChanged.InvokeAsync(Value);

        await OnClearInput.InvokeAsync(true);

        StateHasChanged();
    }

    public void Dispose()
    {
        if (ImmediateResponse) _debounceTimer.Elapsed -= HandleChangeDebouncedDiscard;

        if (_formEventService is not null) _formEventService.OnClearContent -= HandleClearContent;

        if (EditContext is not null) EditContext.OnFieldChanged -= HandleOnValidationStateChanged;
    }
}
