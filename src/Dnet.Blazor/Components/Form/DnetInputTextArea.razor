@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using System.Diagnostics.CodeAnalysis
@using Dnet.Blazor.Infrastructure.Services.CssBuilder
@using System.Timers

@inherits Dnet.Blazor.Infrastructure.Forms.DnetInputBase<string>

@implements IDisposable

@inject IJSRuntime JSRuntime

@if (!ImmediateResponse)
{
    <textarea @ref="__inputReference "
              @attributes="AdditionalAttributes"
              class="@_textareaClass"
              value="@BindConverter.FormatValue(CurrentValue)"
              @onchange="HandleChange"
              @onfocus=@(() => Focus())
              @onblur=@(() => Blur())
              placeholder="@PlaceHolder"
              disabled="@Disabled"
              maxlength="@MaxCharacters"
              @oninput="OnInput"/>
}
else
{
    <textarea @ref="__inputReference "
              @attributes="AdditionalAttributes"
              class="@_textareaClass"
              @bind="CurrentValueAsString"
              @bind:event="oninput"
              @onkeyup="ResetTimer"
              @onkeyup:stopPropagation="true"
              @onkeyup:preventDefault="true"
              @onchange="HandleChange"
              @onfocus=@(() => Focus())
              @onblur=@(() => Blur())
              placeholder="@PlaceHolder"
              disabled="@Disabled" 
              type="tex"
              maxlength="@MaxCharacters"
              />
}

@* <div>@_characterCount / @MaxCharacters characters</div> *@

@code {

    [CascadingParameter]
    private FormFieldCascadingValues? _formFieldCascadingValues { get; set; }

    [Parameter]
    public EventCallback<string> OnStopTyping { get; set; }

    [Parameter]
    public EventCallback<bool> OnClearInput { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public string? Label { get; set; }

    [DisallowNull] public ElementReference? __inputReference { get; protected set; }

    [Parameter]
    public int DebounceTime { get; set; } = 300;

    [Parameter]
    public bool ImmediateResponse { get; set; } = true;

    [Parameter]
    public bool IsRequired { get; set; }

    [Parameter]
    public string? PlaceHolder { get; set; }

    [Parameter]
    public int MaxCharacters { get; set; } = 0;


    private bool _hasFocus { get; set; }

    private bool _hasErrors { get; set; }

    private Timer? _debounceTimer;

    private IFormEventService? _formEventService { get; set; }

    private bool _previousDisabled;

    private string _textareaClass =>
                new CssBuilder("mat-input-element")
                    .AddClass(CssClass)
                .Build();

    private int _characterCount => CurrentValue?.Length ?? 0;


    protected override void OnInitialized()
    {
        _formEventService = _formFieldCascadingValues.FormEventService;

        if (ImmediateResponse)
        {
            _debounceTimer = new Timer(DebounceTime);

            _debounceTimer.Elapsed += HandleChangeDebouncedDiscard;

            _debounceTimer.AutoReset = false;
        }

        if (!string.IsNullOrEmpty(CurrentValue))
        {
            _hasFocus = true;

            if (_formEventService is not null) _formEventService.RaiseFocus(_hasFocus);
        }

        if (_formEventService is not null) _formEventService.RaiseCurrentValue(CurrentValueAsString);

        if (_formEventService is not null) _formEventService.OnClearContent += HandleClearContent;

        if (_formEventService is not null) _formEventService.RaiseDisabledEvent(Disabled);

        var countData = new Tuple<int, int>(_characterCount, MaxCharacters);
        if (_formEventService is not null) _formEventService.RaiseCharCountEvent(countData);

        if (EditContext is not null) EditContext.OnFieldChanged += HandleOnValidationStateChanged;

        _previousDisabled = Disabled;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (_previousDisabled != Disabled)
        {
            _previousDisabled = Disabled;

            OnDisabledChanged();
        }
    }

    public void HandleChangeDebouncedDiscard(Object source, ElapsedEventArgs e)
    {
        _ = HandleChangeDebounced(e);
    }

    private async Task HandleChangeDebounced(ElapsedEventArgs e)
    {
        await InvokeAsync(async () =>
        {
            if (_formEventService is not null) _formEventService.RaiseCurrentValue(CurrentValueAsString);

            // var countData = new Tuple<int, int>(_characterCount, MaxCharacters);
            // if (_formEventService is not null) _formEventService.RaiseCharCountEvent(countData);

            await OnStopTyping.InvokeAsync(CurrentValueAsString);
        });
    }

    private void ResetTimer(KeyboardEventArgs data)
    {
        _debounceTimer.Stop();

        _debounceTimer.Start();
    }

    private void HandleChange(ChangeEventArgs e)
    {
        CurrentValueAsString = e.Value?.ToString();

        // var countData = new Tuple<int, int>(_characterCount, MaxCharacters);
        // if (_formEventService is not null) _formEventService.RaiseCharCountEvent(countData);

        if (_formEventService is not null) _formEventService.RaiseCurrentValue(CurrentValueAsString);
    }

    private void OnInput(ChangeEventArgs e)
    {
        var inputValue = e.Value?.ToString();
        if (inputValue != null && inputValue.Length <= MaxCharacters)
        {
            CurrentValueAsString = inputValue;
        }
        else if (inputValue != null)
        {
            CurrentValueAsString = inputValue.Substring(0, MaxCharacters);
        }

        if (_formEventService is not null) _formEventService.RaiseCurrentValue(CurrentValueAsString);

        StateHasChanged();
    }

    private void Focus()
    {
        _hasFocus = true;

        if (_formEventService is not null) _formEventService.RaiseFocus(_hasFocus);

        StateHasChanged();
    }

    private void Blur()
    {
        if (string.IsNullOrEmpty(CurrentValue))
        {
            _hasFocus = false;

            if (_formEventService is not null) _formEventService.RaiseFocus(_hasFocus);
        }

        if (EditContext is not null)
        {
            _hasErrors = EditContext.GetValidationMessages(FieldIdentifier).Any();

            if (_formEventService is not null) _formEventService.RaiseError(_hasErrors && EditContext.IsModified(FieldIdentifier));
        }

        StateHasChanged();
    }

    private void HandleOnValidationStateChanged(object sender, FieldChangedEventArgs? args)
    {
        if (EditContext is not null)
        {
            _hasErrors = EditContext.GetValidationMessages(FieldIdentifier).Any();

            if (_formEventService is not null) _formEventService.RaiseError(_hasErrors && EditContext.IsModified(FieldIdentifier));
        }
    }

    protected override bool TryParseValueFromString(string value, out string result, out string validationErrorMessage)
    {
        result = value;

        validationErrorMessage = null;

        return true;
    }

    private async void HandleClearContent()
    {
        CurrentValue = null;

        if (EditContext is not null)
        {
            EditContext?.NotifyFieldChanged(FieldIdentifier);

            _hasErrors = EditContext.GetValidationMessages(FieldIdentifier).Any();

            if (_formEventService is not null) _formEventService.RaiseError(_hasErrors && EditContext.IsModified(FieldIdentifier));
        }

        if (_formEventService is not null) _formEventService.RaiseCurrentValue(CurrentValueAsString);

        await ValueChanged.InvokeAsync(Value);

        await OnClearInput.InvokeAsync(true);

        StateHasChanged();
    }

    private void OnDisabledChanged()
    {
        _formEventService?.RaiseDisabledEvent(Disabled);

        StateHasChanged();
    }

    public void Dispose()
    {
        if(_debounceTimer is not null)
        {
            _debounceTimer.Elapsed -= HandleChangeDebouncedDiscard;

            _debounceTimer.Dispose();
        }
    }
}
