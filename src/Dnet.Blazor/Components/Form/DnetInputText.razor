@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using System.Diagnostics.CodeAnalysis
@using Dnet.Blazor.Infrastructure.Services.CssBuilder
@using System.Timers

@inherits Dnet.Blazor.Infrastructure.Forms.DnetInputBase<string>

@implements IDisposable

@if (!ImmediateResponse)
{
    <input @ref="__inputReference" @attributes="AdditionalAttributes" class="@_inputTextClass"
           value="@BindConverter.FormatValue(CurrentValue)" @onchange="HandleChange" @onfocus=@(() => Focus()) @onblur=@(() =>
       Blur()) placeholder="@_placeHolder" disabled="@Disabled" type="text" />
}
else
{
    <input @ref="__inputReference" @attributes="AdditionalAttributes" class="@_inputTextClass" @bind="CurrentValueAsString"
           @bind:event="oninput" @onkeyup="ResetTimer" @onkeyup:stopPropagation="true" @onkeyup:preventDefault="true"
           @onfocus=@(() => Focus()) @onblur=@(() => Blur()) placeholder="@_placeHolder" disabled="@Disabled" type="text" />
}


@code {

    [CascadingParameter]
    private FormFieldCascadingValues? _formFieldCascadingValues { get; set; }

    [Parameter]
    public EventCallback<bool> OnClearInput { get; set; }

    [Parameter]
    public EventCallback<string> OnStopTyping { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public string PlaceHolder { get; set; }

    [Parameter]
    public bool ImmediateResponse { get; set; } = true;

    [DisallowNull]
    public ElementReference? __inputReference { get; protected set; }

    [Parameter]
    public int DebounceTime { get; set; } = 300;

    private bool _hasFocus { get; set; }

    private bool _hasErrors { get; set; }

    private string _placeHolder { get; set; }

    private Timer _debounceTimer;

    private IFormEventService _formEventService { get; set; }

    private string _inputTextClass =>
    new CssBuilder("mat-input-element")
    .AddClass(CssClass)
    .Build();


    protected override void OnInitialized()
    {
        _formEventService = _formFieldCascadingValues.FormEventService;

        if (ImmediateResponse)
        {
            _debounceTimer = new Timer(DebounceTime);

            _debounceTimer.Elapsed += HandleChangeDebouncedDiscard;

            _debounceTimer.AutoReset = false;
        }

        if (!string.IsNullOrEmpty(CurrentValue))
        {
            _hasFocus = true;

            if (_formEventService is not null) _formEventService.RaiseFocus(_hasFocus);
        }

        if (_formEventService is not null) _formEventService.RaiseCurrentValue(CurrentValueAsString);

        if (_formEventService is not null) _formEventService.OnClearContent += HandleClearContent;

        if (EditContext is not null) EditContext.OnFieldChanged += HandleOnValidationStateChanged;
    }

    public void HandleChangeDebouncedDiscard(Object source, ElapsedEventArgs e)
    {
        _ = HandleChangeDebounced(e);
    }

    private async Task HandleChangeDebounced(ElapsedEventArgs e)
    {
        await InvokeAsync(async () =>
        {
            if (_formEventService is not null) _formEventService.RaiseCurrentValue(CurrentValueAsString);

            await OnStopTyping.InvokeAsync(CurrentValueAsString);
        });
    }

    private void ResetTimer(KeyboardEventArgs data)
    {
        _debounceTimer.Stop();

        _debounceTimer.Start();
    }

    private void HandleChange(ChangeEventArgs e)
    {
        CurrentValueAsString = e.Value.ToString();

        if (_formEventService is not null) _formEventService.RaiseCurrentValue(CurrentValueAsString);
    }

    private void Focus()
    {
        _hasFocus = true;

        _placeHolder = PlaceHolder;

        if (_formEventService is not null) _formEventService.RaiseFocus(_hasFocus);

        StateHasChanged();
    }

    private void Blur()
    {
        if (string.IsNullOrEmpty(CurrentValue))
        {
            _hasFocus = false;

            if (_formEventService is not null) _formEventService.RaiseFocus(_hasFocus);
        }

        _placeHolder = string.Empty;

        if (EditContext is not null)
        {

            _hasErrors = EditContext.GetValidationMessages(FieldIdentifier).Any();

            if (_formEventService is not null) _formEventService.RaiseError(_hasErrors && EditContext.IsModified(FieldIdentifier));
        }

        StateHasChanged();
    }

    private void HandleOnValidationStateChanged(object sender, FieldChangedEventArgs? args)
    {
        if (EditContext is not null)
        {
            _hasErrors = EditContext.GetValidationMessages(FieldIdentifier).Any();

            if (_formEventService is not null) _formEventService.RaiseError(_hasErrors && EditContext.IsModified(FieldIdentifier));
        }
    }

    protected override bool TryParseValueFromString(string? value, out string? result, [NotNullWhen(false)] out string?
    validationErrorMessage)
    {
        result = value;

        validationErrorMessage = null;

        return true;
    }

    private async void HandleClearContent()
    {
        CurrentValue = null;

        if (EditContext is not null)
        {
            EditContext?.NotifyFieldChanged(FieldIdentifier);

            _hasErrors = EditContext.GetValidationMessages(FieldIdentifier).Any();

            if (_formEventService is not null) _formEventService.RaiseError(_hasErrors && EditContext.IsModified(FieldIdentifier));
        }

        if (_formEventService is not null) _formEventService.RaiseCurrentValue(CurrentValueAsString);

        await ValueChanged.InvokeAsync(Value);

        await OnClearInput.InvokeAsync(true);

        StateHasChanged();
    }

    public void Dispose()
    {
        if (ImmediateResponse)
        {
            _debounceTimer.Elapsed -= HandleChangeDebouncedDiscard;

            _debounceTimer.Dispose();
        }

        if (_formEventService is not null) _formEventService.OnClearContent -= HandleClearContent;

        if (EditContext is not null) EditContext.OnFieldChanged -= HandleOnValidationStateChanged;
    }
}