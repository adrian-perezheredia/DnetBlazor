@using Dnet.Blazor.Components.Chips
@using Dnet.Blazor.Components.FloatingDoubleList.Infrastructure.Models;
@using Dnet.Blazor.Components.FloatingDoubleList.Infrastructure.Services;
@using Dnet.Blazor.Components.Form
@using Dnet.Blazor.Components.Grid.Infrastructure.Entities;
@using Dnet.Blazor.Components.List;
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using System.Timers
@using System.Diagnostics.CodeAnalysis
@using Dnet.Blazor.Components.Overlay.Infrastructure.Enums
@using Dnet.Blazor.Components.Overlay.Infrastructure.Interfaces
@using Dnet.Blazor.Components.Overlay.Infrastructure.Models
@using Dnet.Blazor.Components.Overlay.Infrastructure.Services
@using Dnet.Blazor.Components.Select.Infrastructure.Services
@using Dnet.Blazor.Infrastructure.Services.CssBuilder
@using System.Globalization;
@using System.Reflection;
@using System.Linq.Expressions;
@using Dnet.Blazor.Infrastructure.Models.SearchModels;

@implements IDisposable

@typeparam TItem

@inherits Dnet.Blazor.Infrastructure.Forms.DnetInputBase<string>

@inject IOverlayService OverlayService


<div class="dnet-plain-select" @onclick=@(() => OpenMenu())>
    <div @ref="_menuTrigger"
         class="dnet-plain-select-trigger" style="width: 100%">
        <div class="dnet-plain-select-value">
            <div class="dnet-floating-doublelist-value-wrapper" style="height: @(InputItemHeight)px">
                @foreach (var item in _itemsToshow)
                {
                    <span class="dnet-select-multi-value">@DisplayValueConverter(item) <span> - </span></span>
                }
            </div>
        </div>
    </div>
</div>



@code {

    [CascadingParameter]
    private FormFieldCascadingValues? _formFieldCascadingValues { get; set; }

    [Parameter]
    public EventCallback<SearchModel> OnSearchLeft { get; set; }

    [Parameter]
    public EventCallback<SearchModel> OnSearchRight { get; set; }

    [Parameter]
    public EventCallback<SearchModel> OnSort { get; set; }

    [Parameter]
    public List<TItem>? RightItems { get; set; }

    [Parameter]
    public List<TItem>? LeftItems { get; set; }

    [Parameter]
    public EventCallback<TransferredItems<TItem>> OnSelectionChanged { get; set; }

    [Parameter]
    public RenderFragment<TItem>? ListItemContent { get; set; }

    [Parameter]
    public RenderFragment<TItem>? ItemPrefixContent { get; set; }

    [Parameter]
    public RenderFragment<TItem>? ItemSufixContent { get; set; }

    [Parameter]
    public ListOptions<TItem>? LeftListOptions { get; set; }

    [Parameter]
    public ListOptions<TItem>? RightListOptions { get; set; }

    [Parameter]
    public RenderFragment? ItemChildContent { get; set; }

    [Parameter]
    public string? Width { get; set; }
    
    [Parameter]
    public string? Height { get; set; } = "300px";

    [Parameter]
    public string? MinWidth { get; set; }

    [Parameter]
    public string? MinHeight { get; set; }

    [Parameter]
    public string? MaxWidth { get; set; }

    [Parameter]
    public string? MaxHeight { get; set; }

    [Parameter]
    public int ItemHeight { get; set; } = 40;

    [Parameter]
    public string BorderRadius { get; set; } = "5px";

    [Parameter]
    public string MarginTop { get; set; } = "5px";

    [Parameter]
    public int DebounceTime { get; set; } = 300;

    [Parameter]
    public int InputItemHeight { get; set; } = 34;

    [Parameter]
    public bool InputTextToUpper { get; set; }

    [Parameter]
    public bool ItemAutoSelection { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public bool DisabledClearButton { get; set; }

    [Parameter]
    public bool IsRequired { get; set; }

    [Parameter]
    public SearchControlOptions? SearchControlOptions { get; set; }

    [Parameter]
    public IEqualityComparer<TItem>? EqualityComparer { get; set; }

    [Parameter]
    public Func<TItem, string>? DisplayValueConverter { get; set; }

    [Parameter]
    public ListToShow SideForSelections { get; set; }


    private ElementReference _menuTrigger;

    private bool _isOpen;

    private OverlayReference? _menuReference;

    private FloatingDoubleListService<TItem>? _floatingDoubleListService;

    private bool _hasFocus { get; set; }

    private bool _hasErrors { get; set; }

    private string? _placeHolder { get; set; }

    private RenderFragment? _clearButtonContent { get; set; }

    private long _nextId { get; set; } = -1;

    private bool _isInitialized { get; set; }

    private List<TItem> _items { get; set; } = new();

    private string _inputTextClass =>
        new CssBuilder("mat-input-element")
            .AddClass("mat-form-field-autofill-control")
            .AddClass("cdk-text-field-autofill-monitored")
            .AddClass(CssClass)
            .Build();

    private string? _displayValueAsString { get; set; } = null;

    private bool _hasInitializedParameters;

    private TransferredItems<TItem> _transferredItems { get; set; } = new();

    private List<TItem> _itemsToshow { get; set; } = new();

    private IFormEventService _formEventService { get; set; }


    protected override void OnInitialized()
    {
        if (_formFieldCascadingValues is not null) _formEventService = _formFieldCascadingValues.FormEventService;

        if (EditContext != null)
        {
            EditContext.OnFieldChanged += HandleOnValidationStateChanged;

            _hasErrors = EditContext.GetValidationMessages(FieldIdentifier).Any();

            if (_formEventService is not null) _formEventService.RaiseError(_hasErrors && EditContext.IsModified(FieldIdentifier));
        }

        if (!DisabledClearButton) _clearButtonContent = CreateClearButtonContent();

        if (!string.IsNullOrEmpty(_displayValueAsString))
        {
            _hasFocus = true;

            if (_formEventService is not null) _formEventService.RaiseFocus(_hasFocus);
        }

        if (_formEventService is not null) _formEventService.RaiseCurrentValue(CurrentValueAsString);

        _isInitialized = true;
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        parameters.SetParameterProperties(this);

        if (ListItemContent == null && RightListOptions.DisplayValueConverter == null)
        {
            throw new InvalidOperationException(
                        $"{nameof(DnetList<TItem>)} You must supply a value for ComponentType or for DisplayValueConverter.");
        }

        if (ListItemContent == null && LeftListOptions.DisplayValueConverter == null)
        {
            throw new InvalidOperationException(
                        $"{nameof(DnetList<TItem>)} You must supply a value for ComponentType or for DisplayValueConverter.");
        }

        return base.SetParametersAsync(ParameterView.Empty);
    }

    protected override void OnParametersSet()
    {
        if (RightItems != null && SideForSelections == ListToShow.Right)
        {
            if (_isInitialized && RightItems.Any())
            {
                _itemsToshow = RightItems;

                _hasFocus = true;

                if (_formEventService is not null) _formEventService.RaiseFocus(_hasFocus);

                _isInitialized = false;
            }
        }
        else if (LeftItems != null && SideForSelections == ListToShow.Left)
        {
            if (_isInitialized && LeftItems.Any())
            {
                _itemsToshow = LeftItems;

                _hasFocus = true;

                if (_formEventService is not null) _formEventService.RaiseFocus(_hasFocus);

                _isInitialized = false;
            }
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender) return;

        _floatingDoubleListService = new FloatingDoubleListService<TItem>();

        _floatingDoubleListService.OnSelectionChange += SelectionChanged;

        _floatingDoubleListService.OnSearchLeft += SearchLeft;

        _floatingDoubleListService.OnSearchRight += SearchRight;

        _floatingDoubleListService.OnClose += ClosenMenu;
    }

    private RenderFragment CreateClearButtonContent()
    {
        var inputContent = new RenderFragment(x =>
        {
            x.OpenElement(4, "div");
            x.AddAttribute(5, "class", "dnet-app-icon-wrapper");
            x.AddAttribute(3, "onclick", EventCallback.Factory.Create<MouseEventArgs>(this, _ => ClearInput()));
            x.OpenElement(6, "span");
            x.AddAttribute(7, "class", "dnet-app-icon dnet-autoc-reset-button");
            x.CloseElement();
            x.CloseElement();
        });

        return inputContent;
    }

    protected override bool TryParseValueFromString(string? value, out string? result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        result = InputTextToUpper ? value?.ToUpper() : value;
        validationErrorMessage = null;
        return true;
    }

    private void OpenMenu()
    {
        if (Disabled) return;

        if (_isOpen) return;

        AttachMenu();

        _isOpen = true;
    }

    private void ClosenMenu()
    {
        if (_isOpen)
        {
            DetachMenu();
        }
    }

    private async void SelectionChanged(TransferredItems<TItem> transferredItems)
    {
        var transfered = SideForSelections == ListToShow.Right ? transferredItems.RighItems : transferredItems.LeftItems;

        _hasFocus = transfered.Any() ? true : false;

        if (_formEventService is not null) _formEventService.RaiseFocus(_hasFocus);

        _itemsToshow = transfered;

        await OnSelectionChanged.InvokeAsync(transferredItems);

        StateHasChanged();
    }

    private async void ClearInput()
    {
        CurrentValueAsString = null;

        _displayValueAsString = null;

        EditContext?.NotifyFieldChanged(FieldIdentifier);

        if (EditContext != null)
        {
            _hasErrors = (EditContext.GetValidationMessages(FieldIdentifier)).Any();

            if (_formEventService is not null) _formEventService.RaiseError(_hasErrors && EditContext.IsModified(FieldIdentifier));
        }

        _hasFocus = false;

        if (_formEventService is not null) _formEventService.RaiseFocus(_hasFocus);

        await ValueChanged.InvokeAsync(Value);

        DetachMenu();

        StateHasChanged();
    }

    private void AttachMenu()
    {
        var positions = new List<ConnectedPosition>
        {
            new()
            {
                OriginX = HorizontalConnectionPos.Start,
                OriginY = VerticalConnectionPos.Bottom,
                OverlayX = HorizontalConnectionPos.Start,
                OverlayY = VerticalConnectionPos.Top
            },
            new()
            {
                OriginX = HorizontalConnectionPos.Start,
                OriginY = VerticalConnectionPos.Top,
                OverlayX = HorizontalConnectionPos.Start,
                OverlayY = VerticalConnectionPos.Bottom
            },
            new()
            {
                OriginX = HorizontalConnectionPos.End,
                OriginY = VerticalConnectionPos.Bottom,
                OverlayX = HorizontalConnectionPos.End,
                OverlayY = VerticalConnectionPos.Top
            },
            new()
            {
                OriginX = HorizontalConnectionPos.End,
                OriginY = VerticalConnectionPos.Top,
                OverlayX = HorizontalConnectionPos.End,
                OverlayY = VerticalConnectionPos.Bottom
            }
        };

        var flexibleConnectedPositionStrategyBuilder = new FlexibleConnectedPositionStrategyBuilder()
            .WithLockedPosition()
            .WithViewportMargin(8)
            .SetOrigin(_formFieldCascadingValues.FormField)
            .WithFlexibleDimensions(false)
            .WithPositions(positions);

        var connectedPanelConfig = new OverlayConfig
            {
                HasBackdrop = true,
                HasTransparentBackdrop = true,
                PositionStrategy = PositionStrategy.FlexibleConnectedTo,
                FlexibleConnectedPositionStrategyBuilder = flexibleConnectedPositionStrategyBuilder,
                MinWidth = MinWidth,
                MaxWidth = MaxWidth,
                MinHeight = MinHeight,
                MaxHeight = MaxHeight,
                MarginTop = MarginTop,
                Width = Width,
                Height = Height,
                ComponentType = ComponentType.FloatingDoubleList
            };

        var menuContent = new RenderFragment(x =>
        {
            x.OpenComponent(0, typeof(DnetFloatingDoubleListPanel<TItem>));
            x.AddAttribute(1, "RightItems", RightItems);
            x.AddAttribute(2, "LeftItems", LeftItems);
            x.AddAttribute(9, "ItemHeight", ItemHeight);
            x.AddAttribute(10, "BorderRadius", BorderRadius);
            x.AddAttribute(11, "FloatingDoubleListService", _floatingDoubleListService);
            x.AddAttribute(12, "ItemPrefixContent", ItemPrefixContent);
            x.AddAttribute(13, "ItemSufixContent", ItemSufixContent);
            x.AddAttribute(14, "ChildContent", ItemChildContent);
            x.AddAttribute(15, "LeftListOptions", LeftListOptions);
            x.AddAttribute(16, "RightListOptions", RightListOptions);
            x.AddAttribute(19, "EqualityComparer", EqualityComparer);
            x.CloseComponent();
        });

        _menuReference = OverlayService.Attach(menuContent, connectedPanelConfig);

        _menuReference.Close += CloseFilter;
    }

    private void DetachMenu()
    {
        if (_isOpen)
        {
            _isOpen = false;

            var result = new OverlayResult
                {
                    OverlayReferenceId = _menuReference.GetOverlayReferenceId(),
                    CloseReason = CloseReason.Cancel
                };

            OverlayService.Detach(result);
        }
    }

    void CloseFilter(OverlayResult overlayDataResult)
    {
        _isOpen = false;
    }

    private async void SearchLeft(SearchModel searchModel)
    {
        await OnSearchLeft.InvokeAsync(searchModel);
    }

    private async void SearchRight(SearchModel searchModel)
    {
        await OnSearchRight.InvokeAsync(searchModel);
    }

    public void RefreshDataLeft(List<TItem> items)
    {
        _isInitialized = false;

        if (SideForSelections == ListToShow.Right)
        {

            CurrentValue = null;

            EditContext?.NotifyFieldChanged(FieldIdentifier);

            if (EditContext != null)
            {
                _hasErrors = (EditContext.GetValidationMessages(FieldIdentifier)).Any();

                if (_formEventService is not null) _formEventService.RaiseError(_hasErrors && EditContext.IsModified(FieldIdentifier));
            }
        }

        _floatingDoubleListService.RefreshDataLeft(items);
    }

    public void RefreshDataRight(List<TItem> items)
    {
        _isInitialized = false;

        if (SideForSelections == ListToShow.Right)
        {

            CurrentValue = null;

            EditContext?.NotifyFieldChanged(FieldIdentifier);

            if (EditContext != null)
            {
                _hasErrors = (EditContext.GetValidationMessages(FieldIdentifier)).Any();

                if (_formEventService is not null) _formEventService.RaiseError(_hasErrors && EditContext.IsModified(FieldIdentifier));
            }
        }

        _floatingDoubleListService.RefreshDataRight(items);
    }

    private void HandleOnValidationStateChanged(object sender, FieldChangedEventArgs? args)
    {
        if (EditContext != null)
        {
            _hasErrors = (EditContext.GetValidationMessages(FieldIdentifier)).Any();

            if (_formEventService is not null) _formEventService.RaiseError(_hasErrors && EditContext.IsModified(FieldIdentifier));
        }
    }

    public void Dispose()
    {
        if (_menuReference != null) _menuReference.Close -= CloseFilter;

        if (_floatingDoubleListService is not null)
        {
            _floatingDoubleListService.OnSelectionChange -= SelectionChanged;

            _floatingDoubleListService.OnSearchLeft -= SearchLeft;

            _floatingDoubleListService.OnSearchRight -= SearchRight;

            _floatingDoubleListService.OnClose -= ClosenMenu;
        }
    }
}