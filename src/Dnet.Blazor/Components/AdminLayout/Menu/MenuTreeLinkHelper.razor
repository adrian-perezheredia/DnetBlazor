@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web

<div class="@GetLinkCLass()" @attributes="AdditionalAttributes">
    @if (Menu is not null && Menu.Children.Count > 0)
    {
        <a @onclick="@Toggle">

            @if (Menu.IsNode || Menu.Children.Count > 0)
            {
                <span class="menu-item-parent">@Menu.Text</span>
            }

            <b class="collapse-sign">
                @if (!IsOpen)
                {
                    <span>
                        <svg class="bi bi-chevron-right" width="1em" height="1em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                            <path fill-rule="evenodd" d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z" />
                        </svg>
                    </span>
                }

                @if (IsOpen)
                {
                    <span>
                        <svg class="bi bi-chevron-down" width="1em" height="1em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                            <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z" />
                        </svg>
                    </span>
                }
            </b>
        </a>
    }

    @if (Menu is not null && Menu.Children.Count <= 0)
    {
        <NavLink href="@Menu.Link">

            @if (Menu.IsNode || Menu.Children.Count > 0)
            {
                <span class="menu-item-parent">@Menu.Text</span>
            }
        </NavLink>
    }

</div>

@code {

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    [Parameter]
    public NavigationMenu? Menu { get; set; }

    [Parameter]
    public EventCallback<bool> OnLinkNodeClick { get; set; }


    private bool IsOpen { get; set; } = false;


    async Task Toggle()
    {
        IsOpen = !IsOpen;
        await OnLinkNodeClick.InvokeAsync(IsOpen);
    }

    private string GetLinkCLass()
    {
        return Menu is not null && Menu.HasImage ? $"dnet-tree-cmp-link" : "dnet-tree-cmp-link no-image";
    }
}