@using Dnet.Blazor.Components.Overlay.Infrastructure.Enums
@using Dnet.Blazor.Components.Overlay.Infrastructure.Interfaces
@using Dnet.Blazor.Components.Overlay.Infrastructure.Models
@using Dnet.Blazor.Components.Overlay.Infrastructure.Services
@using Dnet.Blazor.Infrastructure.Services.CssBuilder
@using Microsoft.AspNetCore.Components.Web

@inject IOverlayService OverlayService

@implements IDisposable

<div @ref="_overlayContainerRef" class="@_overlayCssClasses">
    <CascadingValue Value="this" IsFixed="true">
        @_contenBackDrop
        @_contenHost
    </CascadingValue>
</div>

@code {
    [Parameter]
    public int BaseZindex { get; set; }

    private Dictionary<int, Tuple<RenderFragment, OverlayConfig>> _overlays { get; set; } = new();

    private Dictionary<int, Tuple<string, string>> _backdrops { get; set; } = new();

    private RenderFragment _contenHost { get; set; }

    private RenderFragment _contenBackDrop { get; set; }

    private string _overlayCssClasses { get; set; }

    private string _backdropCssClasses { get; set; }

    private ElementReference _overlayContainerRef;

    private int _baseZindex;


    protected override void OnInitialized()
    {
        _baseZindex = BaseZindex;

        _overlayCssClasses = GetOverlayCssClasses();

        ((OverlayService)OverlayService).OnAttach += AttachOverlay;
        ((OverlayService)OverlayService).OnDetach += DetachOverlay;
    }

    private void AttachOverlay(RenderFragment content, OverlayConfig overlayConfig)
    {
        var lastIndex = _overlays.Any() ? _overlays.Max(p => p.Value.Item2.LastZindex) : 0;

        var backdropZindex = _baseZindex + (int)lastIndex;
        lastIndex++;

        if (overlayConfig.HasBackdrop) AttachBackdrop(overlayConfig, backdropZindex);

        overlayConfig.HostZindex = _baseZindex + lastIndex;
        lastIndex++;

        overlayConfig.PanelZindex = _baseZindex + lastIndex;
        lastIndex++;

        overlayConfig.LastZindex = lastIndex;

        var pane = CreatePaneElement(content, overlayConfig);
        var host = CreateHostElement(pane, overlayConfig);

        var overlayData = new Tuple<RenderFragment, OverlayConfig>(host, overlayConfig);

        _overlays.Add(overlayConfig.OverlayReferenceId, overlayData);

        _contenHost = AddHostConent(_overlays);

        StateHasChanged();
    }

    private void DetachOverlay(OverlayResult overlayDataResult)
    {
        var overlay = _overlays.GetValueOrDefault(overlayDataResult.OverlayReferenceId);

        if (overlay == null) return;

        if (overlay.Item2.HasBackdrop) DetachBackdrop(overlayDataResult);

        _overlays.Remove(overlayDataResult.OverlayReferenceId);

        _contenHost = AddHostConent(_overlays);

        StateHasChanged();
    }

    private void AttachBackdrop(OverlayConfig overlayConfig, int zIndex)
    {
        _backdropCssClasses = GetBackdropCssClasses(overlayConfig);

        var style = _backdrops.Any() ? $"opacity: 0; z-index: {zIndex}" : $"z-index: {zIndex}";

        var styles = new Tuple<string, string>(_backdropCssClasses, style);

        _backdrops.Add(overlayConfig.OverlayReferenceId, styles);

        _contenBackDrop = CreateBackdrops();
    }

    private void DetachBackdrop(OverlayResult overlayDataResult)
    {
        _backdrops.Remove(overlayDataResult.OverlayReferenceId);

        _contenBackDrop = CreateBackdrops();
    }

    private RenderFragment CreateBackdrops()
    {
        var backdrops = new RenderFragment(x =>
        {
            foreach (var backdrop in _backdrops)
            {
                var s = -1;
                x.OpenElement(s++, "div");
                x.AddAttribute(s++, "id", $"cdk-overlay-backdrop-{backdrop.Key}");
                x.AddAttribute(s++, "style", backdrop.Value.Item2);
                x.AddAttribute(s++, "class", backdrop.Value.Item1);
                x.AddAttribute(s++, "onclick", EventCallback.Factory.Create<MouseEventArgs>(this, e => BackdropClicked(e, backdrop.Key)));
                x.CloseElement();
            }
        });

        return backdrops;
    }

    private RenderFragment CreatePaneElement(RenderFragment content, OverlayConfig overlayConfig)
    {
        var pane = new RenderFragment(x =>
        {
            var s = -1;
            x.OpenComponent(s++, typeof(DnetOverlayPane));
            x.AddAttribute(s++, "ContentChild", content);
            x.AddAttribute(s++, "OverlayConfig", overlayConfig);
            x.CloseComponent();
        });

        return pane;
    }

    private RenderFragment CreateHostElement(RenderFragment pane, OverlayConfig overlayConfig)
    {
        var host = new RenderFragment(x =>
        {
            var s = -1;
            x.OpenComponent(s++, typeof(DnetOverlayHost));
            x.AddAttribute(s++, "ContentChild", pane);
            x.AddAttribute(s++, "OverlayConfig", overlayConfig);
            x.CloseComponent();
        });

        return host;
    }

    private RenderFragment AddHostConent(Dictionary<int, Tuple<RenderFragment, OverlayConfig>> overlays)
    {
        var content = new RenderFragment(x =>
        {
            var orderedOverlays = overlays.OrderBy(p => p.Key);

            foreach (var over in orderedOverlays)
            {
                var (overlayContent, overlayConfig) = over.Value;

                x.AddContent(overlayConfig.OverlayReferenceId, overlayContent);
            }
        });

        return content;
    }

    private string GetOverlayCssClasses()
    {
        var classes = new CssBuilder("cdk-overlay-container")
            .Build();

        return classes;
    }

    private string GetBackdropCssClasses(OverlayConfig overlayConfig)
    {
        var classes = new CssBuilder("cdk-overlay-backdrop cdk-overlay-backdrop-showing")
            .AddClass("cdk-overlay-transparent-backdrop", when: overlayConfig.HasTransparentBackdrop)
            .AddClass("cdk-overlay-dark-backdrop", when: !overlayConfig.HasTransparentBackdrop)
            .AddClass(overlayConfig.BackdropClass, when: !string.IsNullOrEmpty(overlayConfig.BackdropClass))
            .Build();

        return classes;
    }

    private void BackdropClicked(MouseEventArgs e, int reference)
    {
        var overlay = _overlays.GetValueOrDefault(reference);

        var disableBackdropClick = overlay is not null ? overlay.Item2.DisableBackdropClick : false;

        if(!disableBackdropClick)
        {
            OverlayService.BackdropClicked(new OverlayResult { CloseReason = CloseReason.Cancel, OverlayReferenceId = reference });
        }
    }

    public ElementReference GeElementReference()
    {
        return _overlayContainerRef;
    }

    public void Dispose()
    {
        ((OverlayService)OverlayService).OnAttach -= AttachOverlay;
        ((OverlayService)OverlayService).OnDetach -= DetachOverlay;
    }
}
