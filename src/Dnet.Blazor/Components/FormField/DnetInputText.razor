@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using System.Diagnostics.CodeAnalysis
@using Dnet.Blazor.Infrastructure.Services.CssBuilder
@using System.Timers

@inherits Dnet.Blazor.Infrastructure.Forms.DnetInputBase<string>

@implements IDisposable

@inject IJSRuntime JSRuntime

@if (!ImmediateResponse)
{
    <DnetFormField CurrentValue="@CurrentValue"
                   Appearance="@Appearance"
                   PlaceHolder="@PlaceHolder"
                   FloatLabel="@FloatLabel"
                   HasFocus="@_hasFocus"
                   Disabled="@Disabled"
                   Label="@Label"
                   PrefixContent="@PrefixContent"
                   SufixContent="@SufixContent"
                   HintContent="HintContent"
                   ErrorContent="ErrorContent"
                   HasErrors="_hasErrors && EditContext.IsModified(FieldIdentifier)"
                   IsRequired="@IsRequired">
        <input @ref="__inputReference "
               @attributes="AdditionalAttributes"
               class="@_inputTextClass"
               value="@BindConverter.FormatValue(CurrentValue)"
               @onchange="@((ChangeEventArgs __e) => CurrentValueAsString = __e.Value.ToString())"
               @onfocus=@(() => Focus())
               @onblur=@(() => Blur())
               placeholder="@_placeHolder"
               disabled="@Disabled" />
    </DnetFormField>

}
else
{
    <DnetFormField CurrentValue="@CurrentValue"
                   Appearance="@Appearance"
                   PlaceHolder="@PlaceHolder"
                   FloatLabel="@FloatLabel"
                   HasFocus="@_hasFocus"
                   Disabled="@Disabled"
                   Label="@Label"
                   PrefixContent="@PrefixContent"
                   SufixContent="@SufixContent"
                   HintContent="HintContent"
                   ErrorContent="ErrorContent"
                   HasErrors="_hasErrors && EditContext.IsModified(FieldIdentifier)"
                   IsRequired="@IsRequired">
        <input @ref="__inputReference "
               @attributes="AdditionalAttributes"
               class="@_inputTextClass"
               @bind="CurrentValueAsString"
               @bind:event="oninput"
               @onkeyup="ResetTimer"
               @onkeyup:stopPropagation="true"
               @onkeyup:preventDefault="true"
               @onfocus=@(() => Focus())
               @onblur=@(() => Blur())
               placeholder="@_placeHolder"
               disabled="@Disabled" />
    </DnetFormField>
}


@code {

    [Parameter]
    public EventCallback<string> OnStopTyping { get; set; }

    [Parameter]
    public RenderFragment PrefixContent { get; set; }

    [Parameter]
    public RenderFragment SufixContent { get; set; }

    [Parameter]
    public RenderFragment HintContent { get; set; }

    [Parameter]
    public RenderFragment ErrorContent { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public string PlaceHolder { get; set; }

    [Parameter]
    public string Hint { get; set; }

    [Parameter]
    public Appearance Appearance { get; set; }

    [Parameter]
    public FloatLabel FloatLabel { get; set; } = FloatLabel.AsUserTypes;

    [Parameter]
    public string Label { get; set; }

    [DisallowNull]
    public ElementReference? __inputReference { get; protected set; }

    [Parameter]
    public bool IsRequired { get; set; }

    [Parameter]
    public bool ImmediateResponse { get; set; } = true;

    [Parameter]
    public int DebounceTime { get; set; } = 300;

    private bool _hasFocus { get; set; }

    private bool _hasErrors { get; set; }

    private string _placeHolder { get; set; }

    private Timer _debounceTimer;

    private string _inputTextClass =>
        new CssBuilder("mat-input-element")
            .AddClass("mat-form-field-autofill-control") 
            .AddClass("cdk-text-field-autofill-monitored")
            .AddClass(CssClass)
            .Build();


    protected override void OnInitialized()
    {
        if (ImmediateResponse)
        {
            _debounceTimer = new Timer(DebounceTime);

            _debounceTimer.Elapsed += HandleChangeDebouncedDiscard;

            _debounceTimer.AutoReset = false;
        }

        if (!string.IsNullOrEmpty(CurrentValue)) _hasFocus = true;

        if (EditContext != null) EditContext.OnFieldChanged += HandleOnValidationStateChanged;
    }

    public void HandleChangeDebouncedDiscard(Object source, ElapsedEventArgs e)
    {
        _ = HandleChangeDebounced(e);
    }

    private async Task HandleChangeDebounced(ElapsedEventArgs e)
    {
        await InvokeAsync(async () =>
        {
            await OnStopTyping.InvokeAsync(CurrentValueAsString);
        });
    }

    private void ResetTimer(KeyboardEventArgs data)
    {
        _debounceTimer.Stop();

        _debounceTimer.Start();
    }

    private void Focus()
    {
        _hasFocus = true;
        _placeHolder = PlaceHolder;
        StateHasChanged();
    }

    private void Blur()
    {
        if (string.IsNullOrEmpty(CurrentValue))
        {
            _hasFocus = false;
        }
        _placeHolder = string.Empty;

        if (EditContext != null) _hasErrors = EditContext.GetValidationMessages(FieldIdentifier).Any();

        StateHasChanged();
    }

    private void HandleOnValidationStateChanged(object sender, FieldChangedEventArgs? args)
    {
        if (EditContext != null) _hasErrors = EditContext.GetValidationMessages(FieldIdentifier).Any();
    }

    protected override bool TryParseValueFromString(string? value, out string? result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        result = value;
        validationErrorMessage = null;
        return true;
    }

    public void Dispose()
    {
        if (ImmediateResponse) _debounceTimer.Elapsed -= HandleChangeDebouncedDiscard;
    }
}