@using Dnet.Blazor.Components.AdminDashboard.Infrastructure.Enums
@using Dnet.Blazor.Components.AdminDashboard.Infrastructure.HelperClasses
@using Dnet.Blazor.Components.AdminDashboard.Infrastructure.Interfaces
@using Dnet.Blazor.Components.AdminDashboard.Infrastructure.Models
@using Dnet.Blazor.Components.AdminDashboard.Infrastructure.Services
@using Dnet.Blazor.Components.AdminDashboard.DesktopLayout
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop

@inject IThemeMessageService<ThemeConfigData> ThemeMessageService
@inject IJSRuntime JSRuntime

<div class="desktop-minify-menu" @onclick="Toggle">
    @if (AllowMinified)
    {
        <div class="minifyme" style="@GetStyle()">
            <div class="img-container justify-content-center">
                <span class="dnet-expand-arrow dnet-expand-arrow1"></span>
            </div>
        </div>
    }
</div>

@code {

    [CascadingParameter]
    private DesktopLayout _desktopLayout { get; set; }

    [Parameter]
    public bool AllowMinified { get; set; }

    public bool IsMinified { get; set; }

    public LocalStorageData LocalStorageData { get; set; } = new LocalStorageData();

    private string GetStyle()
    {
        return _desktopLayout.ShowMinifier ? "display: flex;" : "display: none;";
    }

    public void Toggle()
    {
        if (!AllowMinified) return;

        IsMinified = !IsMinified;

        var themeConfigData = new ThemeConfigData { IsMinified = IsMinified };

        var actionMessage = new ActionMessage<ThemeConfigData>
            {
                Emitter = ThemeMessageEmitter.DesktopMinifyMenu,
                Data = themeConfigData
            };

        ThemeMessageService.SendMessage(actionMessage);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var localStorageData = await DnetAdminDashboardInterop.GetAsync<LocalStorageData>(JSRuntime, "DnetBlazor");

        if (localStorageData != null)
        {

            LocalStorageData = localStorageData;
            IsMinified = LocalStorageData.IsMinified;
        }
    }

}