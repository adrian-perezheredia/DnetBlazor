@using System.Timers
@using Dnet.Blazor.Components.Spinner.Infrastructure.Interfaces
@using Dnet.Blazor.Components.Spinner.Infrastructure.Services

@inject ISpinnerService SpinnerService

@implements IDisposable;

@if (_counter > 0 && CanRun)
{
    @if (ShowMask)
    {
        <input @ref="_spinnermask" style="position: absolute; left:-1000px;height:0px;top:50%;" />
        <div class="mask-spinner" style="width: @_width; height: @_height; position: @_position"></div>
    }

    <div class="spinner" style="top:@_top; left: @_left; position: @_position">
        <div class="rect1"></div>
        <div class="rect2"></div>
        <div class="rect3"></div>
        <div class="rect4"></div>
        <div class="rect5"></div>
    </div>
}

@code {

    [Parameter]
    public bool CanRun { get; set; }

    [Parameter]
    public bool BindToView { get; set; }

    [Parameter]
    public bool ShowMask { get; set; }

    [Parameter]
    public int DebounceTime { get; set; } = 250;


    private int _counter { get; set; } = 0;

    private int _counterRequest { get; set; } = 0;

    private ElementReference _spinnermask;

    private string _top = "50%";

    private string _left = "50%";

    private string _width = "100vw";

    private string _height = "100vh";

    private string _position = "absolute";

    private Timer? _debounceTimer;


    protected override void OnInitialized()
    {
        _position = BindToView ? "fixed" : "absolute";

        _top = BindToView ? "50%" : "50%";

        _left = BindToView ? "50%" : "50%";

        _width = BindToView ? "100vw" : "50%";

        _height = BindToView ? "100vh" : "50%";

        _debounceTimer = new Timer(DebounceTime);

        _debounceTimer.Elapsed += OnUserFinish;

        _debounceTimer.AutoReset = true;

        ((SpinnerService)SpinnerService).OnCounterReceived += CounterUpdated;
    }

    private async void CounterUpdated(int counter)
    {
        await InvokeAsync(() =>
        {
            if (_counterRequest > 0 && counter == -1)
            {
                _counterRequest = _counterRequest + counter;

                if (_counterRequest == 0)
                {
                    _counter = 0;

                    _debounceTimer.Stop();
                }
            }
            else if (_counterRequest > 0 && counter == 1)
            {
                _counterRequest = _counterRequest + counter;
            }
            else if (_counterRequest == 0 && counter == 1)
            {
                _debounceTimer.Start();

                 _counterRequest = _counterRequest + counter;
            }

            StateHasChanged();
        });
    }

    private async void OnUserFinish(object? source, ElapsedEventArgs e)
    {
        await InvokeAsync(() =>
        {
            _counter = _counter + _counterRequest;

            StateHasChanged();
        });
    }

    public void Dispose()
    {
        ((SpinnerService)SpinnerService).OnCounterReceived -= CounterUpdated;

       _debounceTimer.Elapsed -= OnUserFinish;
    }

}