@using Dnet.Blazor.Components.Form
@using Dnet.Blazor.Infrastructure.Services
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using System.Timers
@using System.Diagnostics.CodeAnalysis
@using Dnet.Blazor.Components.Autocomplete.Infrastructure.Services
@using Dnet.Blazor.Components.Overlay.Infrastructure.Enums
@using Dnet.Blazor.Components.Overlay.Infrastructure.Interfaces
@using Dnet.Blazor.Components.Overlay.Infrastructure.Models
@using Dnet.Blazor.Components.Overlay.Infrastructure.Services
@using Dnet.Blazor.Infrastructure.Services.CssBuilder
@using Dnet.Blazor.Infrastructure.Enums
@using System.Linq.Expressions;

@implements IDisposable

@typeparam TItem

@typeparam TValue

@inherits Dnet.Blazor.Infrastructure.Forms.DnetInputBase<TValue>

@inject IOverlayService OverlayService

<input @ref="__inputReference" 
       @attributes="AdditionalAttributes" 
       class="@_inputTextClass"
       value="@BindConverter.FormatValue(CurrentValue)"
       @onfocus=@(() => Focus()) @onblur=@(() => Blur())
       @oninput="@((ChangeEventArgs __e) => UpdateCurrentValue(__e.Value))" 
       @onfocusin=@(() => OpenMenu())
       @onkeyup=@((KeyboardEventArgs __e) => HandleKeyUp(__e)) 
       @onkeydown=@((KeyboardEventArgs __e) => HandleKeydown(__e))
       @onclick:stopPropagation="true" 
       @onclick:preventDefault="true" 
       placeholder="@PlaceHolder"
       disabled="@Disabled"
       autocomplete="none" />

@code {

    [CascadingParameter]
    private FormFieldCascadingValues? _formFieldCascadingValues { get; set; }

    [Parameter]
    public EventCallback<TItem> OnItemSelected { get; set; }

    [DisallowNull]
    public ElementReference __inputReference { get; protected set; }

    [Parameter]
    public EventCallback<string> OnStopTyping { get; set; }

    [Parameter]
    public EventCallback<bool> OnClearInput { get; set; }

    [Parameter]
    [NotNull]
    public Func<TItem, string>? DisplayValueConverter { get; set; }

    [Parameter]
    [NotNull]
    public Expression<Func<TItem, TValue>>? ValueConverter { get; set; }

    [Parameter]
    public CustomSort<TItem>? SortBy { get; set; }

    [Parameter]
    public CustomFilter<TItem>? FilterBy { get; set; }

    [Parameter]
    public RenderFragment<TItem>? ItemPrefixContent { get; set; }

    [Parameter]
    public RenderFragment<TItem>? ItemSufixContent { get; set; }

    [Parameter]
    public RenderFragment<TItem>? ItemChildContent { get; set; }

    [Parameter]
    public RenderFragment<TItem>? FooterContent { get; set; }

    [Parameter]
    public List<TItem> Items { get; set; } = new();

    [Parameter]
    public string OrderBy { get; set; } = "ASC";

    [Parameter]
    public string? Width { get; set; }

    [Parameter]
    public string? Height { get; set; } = "300px";

    [Parameter]
    public string? MinWidth { get; set; } = "300px";

    [Parameter]
    public string? MinHeight { get; set; }

    [Parameter]
    public string? MaxWidth { get; set; }

    [Parameter]
    public string? MaxHeight { get; set; }

    [Parameter]
    public string MarginTop { get; set; } = "5px";

    [Parameter]
    public int ItemHeight { get; set; } = 50;

    [Parameter]
    public int DebounceTime { get; set; } = 300;

    [Parameter]
    public bool InputTextToUpper { get; set; }

    [Parameter]
    public bool ItemAutoSelection { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public bool EnableServerSide { get; set; }

    [Parameter]
    public bool OrderStartingBySearchedString { get; set; } = false;

    [Parameter]
    public bool IsRequired { get; set; }

    [Parameter]
    public string PlaceHolder { get; set; } = string.Empty;

    [Parameter]
    public string? OverlayPanelClass { get; set; }


    private bool _isOpen;

    private bool _isClosing;

    private OverlayReference? _menuReference;

    private Timer? _debounceTimer;

    private AutoCompleteListService<TItem>? _autoCompleteListService;

    private bool _hasFocus { get; set; }

    private bool _hasErrors { get; set; }

    private TItem? _itemSelected { get; set; }

    private bool _hasInitializedParameters;

    private IFormEventService _formEventService { get; set; }

    private List<TItem> _items { get; set; } = new();

    private bool _previousDisabled;

    private string _inputTextClass =>
    new CssBuilder("mat-input-element")
    .AddClass(CssClass)
    .Build();


    protected override void OnInitialized()
    {
        _formEventService = _formFieldCascadingValues.FormEventService;

        _debounceTimer = new Timer(DebounceTime);

        _debounceTimer.Elapsed += OnUserFinished;

        _debounceTimer.AutoReset = false;

        if (!string.IsNullOrEmpty(CurrentValueAsString))
        {
            _hasFocus = true;

            if (_formEventService is not null) _formEventService.RaiseFocus(_hasFocus);
        }

        EditContext.OnFieldChanged += HandleOnValidationStateChanged;

        _hasErrors = EditContext.GetValidationMessages(FieldIdentifier).Any();

        if (_formEventService is not null) _formEventService.RaiseError(_hasErrors && EditContext.IsModified(FieldIdentifier));

        if (_formEventService is not null) _formEventService.RaiseCurrentValue(CurrentValueAsString);

        if (_formEventService is not null) _formEventService.OnClearContent += ClearInput;

        if (_formEventService is not null) _formEventService.RaiseDisabledEvent(Disabled);

        _previousDisabled = Disabled;
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        parameters.SetParameterProperties(this);

        if (!_hasInitializedParameters)
        {
            if (!EnableServerSide)
            {
                if (SortBy == null) throw new NullReferenceException($"SortBy could not be Null");

                if (FilterBy == null) throw new NullReferenceException($"FilterBy could not be Null");
            }

            _hasInitializedParameters = true;
        }

        return base.SetParametersAsync(ParameterView.Empty);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (_previousDisabled != Disabled)
        {
            _previousDisabled = Disabled;

            OnDisabledChanged();
        }
    }

    protected override Task OnParametersSetAsync()
    {
        var dataSourceHasChanged = _items != Items;

        if (dataSourceHasChanged)
        {
            _items = Items ?? new List<TItem>();
        }

        return base.OnParametersSetAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender) return;

        _autoCompleteListService = new AutoCompleteListService<TItem>();

        _autoCompleteListService.OnItemSelected += ItemSelected;

        _autoCompleteListService.OnUpdateCurrentValueFrontDialog += UpdateCurrentValueFrontDialog;
    }

    private async void UpdateCurrentValueFrontDialog(string currentValue)
    {
        UpdateCurrentValue(currentValue);

        if (EnableServerSide)
        {
            await OnStopTyping.InvokeAsync(CurrentValueAsString);
        }
        else
        {
            if (!string.IsNullOrEmpty(CurrentValueAsString))
            {
                var items = new List<TItem>();

                items = FilterAndSort(CurrentValueAsString);

                var item = items.FirstOrDefault();

                if(_autoCompleteListService is not null) _autoCompleteListService.UdateList(items);

                if (item == null)
                {
                    _itemSelected = item;

                    await OnItemSelected.InvokeAsync(item);
                }
            }
            else
            {
                if(_autoCompleteListService is not null) _autoCompleteListService.UdateList(_items);

                _itemSelected = default;

                await OnItemSelected.InvokeAsync(_itemSelected);
            }
        }

        if (ItemPrefixContent is null && ItemSufixContent is null) return;

        StateHasChanged();
    }

    private void UpdateCurrentValue(object value)
    {
        if (value is string stringValue)
        {
            CurrentValue = (TValue)(object)stringValue;

            if (_formEventService is not null) _formEventService.RaiseCurrentValue(CurrentValueAsString);
        }
        else if (typeof(TValue) == typeof(int) && int.TryParse(value.ToString(), out var parsedValue))
        {
            CurrentValue = (TValue)(object)parsedValue;

            if (_formEventService is not null) _formEventService.RaiseCurrentValue(CurrentValueAsString);
        }
    }

    protected override bool TryParseValueFromString(string? value, out TValue result, [NotNullWhen(false)] out string?
    validationErrorMessage)
    {
        if (typeof(TValue) == typeof(string))
        {
            result = (TValue)(object)value;
            validationErrorMessage = null;
            return true;
        }
        else if (typeof(TValue) == typeof(int))
        {
            if (int.TryParse(value, out var parsedValue))
            {
                result = (TValue)(object)parsedValue;
                validationErrorMessage = null;
                return true;
            }
        }

        result = default;
        validationErrorMessage = $"The provided value '{value}' is not valid.";
        return false;
    }

    private void HandleKeydown(KeyboardEventArgs data)
    {
        if (data.Key != "Tab") return;
        _debounceTimer.Stop();
        _isClosing = true;
    }

    private void HandleKeyUp(KeyboardEventArgs data)
    {
        if (data.Key == "Tab")
        {
            ClosenMenu();
            return;
        }

        _debounceTimer.Stop();

        _debounceTimer.Start();
    }

    private async void OnUserFinished(Object? source, ElapsedEventArgs e)
    {
        await InvokeAsync(async () =>
        {
            if (EnableServerSide)
            {
                await OnStopTyping.InvokeAsync(CurrentValueAsString);
            }
            else
            {
                if (!string.IsNullOrEmpty(CurrentValueAsString))
                {
                    var items = new List<TItem>();

                    items = FilterAndSort(CurrentValueAsString);

                    var item = items.FirstOrDefault();

                    if(_autoCompleteListService is not null) _autoCompleteListService.UdateList(items);

                    if (item == null)
                    {
                        _itemSelected = item;

                        await OnItemSelected.InvokeAsync(item);
                    }
                }
                else
                {
                    if(_autoCompleteListService is not null) _autoCompleteListService.UdateList(_items);

                    _itemSelected = default;

                    await OnItemSelected.InvokeAsync(_itemSelected);
                }
            }

            if (EditContext is not null)
            {
                _hasErrors = EditContext.GetValidationMessages(FieldIdentifier).Any();

                if (_formEventService is not null) _formEventService.RaiseError(_hasErrors && EditContext.IsModified(FieldIdentifier));
            }

            if (ItemPrefixContent is null && ItemSufixContent is null) return;

            StateHasChanged();
        });
    }

    private async Task OpenMenu()
    {
        if (Disabled) return;

        if (_isOpen) return;

        await __inputReference.FocusAsync();

        AttachMenu();

        _isOpen = true;
    }

    private void ClosenMenu()
    {
        if (_isOpen && _isClosing)
        {
            _isClosing = false;
            DetachMenu();
        }
    }

    public async void ItemSelected(TItem item)
    {
        Func<TItem, TValue> func = ValueConverter.Compile();

        Value = func(item);

        _itemSelected = item;

        await ValueChanged.InvokeAsync(Value);

        if (!string.IsNullOrEmpty(CurrentValueAsString))
        {
            _hasFocus = true;

            if (_formEventService is not null) _formEventService.RaiseFocus(_hasFocus);
        }

        if (EditContext is not null)
        {
            _hasErrors = EditContext.GetValidationMessages(FieldIdentifier).Any();

            if (_formEventService is not null) _formEventService.RaiseError(_hasErrors && EditContext.IsModified(FieldIdentifier));
        }

        if (_formEventService is not null) _formEventService.RaiseCurrentValue(CurrentValueAsString);

        await OnItemSelected.InvokeAsync(item);

        EditContext?.NotifyFieldChanged(FieldIdentifier);

        DetachMenu();

        StateHasChanged();
    }

    private async void ClearInput()
    {
        CurrentValue = default(TValue);

        if (EditContext is not null)
        {
            _hasErrors = EditContext.GetValidationMessages(FieldIdentifier).Any();

            if (_formEventService is not null) _formEventService.RaiseError(_hasErrors && EditContext.IsModified(FieldIdentifier));
        }

        _hasFocus = false;

        if (_formEventService is not null) _formEventService.RaiseFocus(_hasFocus);

        if (_formEventService is not null) _formEventService.RaiseCurrentValue(CurrentValueAsString);

        await ValueChanged.InvokeAsync(Value);

        await OnClearInput.InvokeAsync(true);

        EditContext?.NotifyFieldChanged(FieldIdentifier);

        DetachMenu();

        StateHasChanged();
    }

    private void AttachMenu()
    {
        var positions = new List<ConnectedPosition>
                        {
                            new()
                            {
                                OriginX = HorizontalConnectionPos.Start,
                                OriginY = VerticalConnectionPos.Bottom,
                                OverlayX = HorizontalConnectionPos.Start,
                                OverlayY = VerticalConnectionPos.Top
                            },
                            new()
                            {
                                OriginX = HorizontalConnectionPos.Start,
                                OriginY = VerticalConnectionPos.Top,
                                OverlayX = HorizontalConnectionPos.Start,
                                OverlayY = VerticalConnectionPos.Bottom
                            },
                            new()
                            {
                                OriginX = HorizontalConnectionPos.End,
                                OriginY = VerticalConnectionPos.Bottom,
                                OverlayX = HorizontalConnectionPos.End,
                                OverlayY = VerticalConnectionPos.Top
                            },
                            new()
                            {
                                OriginX = HorizontalConnectionPos.End,
                                OriginY = VerticalConnectionPos.Top,
                                OverlayX = HorizontalConnectionPos.End,
                                OverlayY = VerticalConnectionPos.Bottom
                            }
                        };

        var flexibleConnectedPositionStrategyBuilder = new FlexibleConnectedPositionStrategyBuilder()
        .WithLockedPosition()
        .WithViewportMargin(8)
        .SetOrigin(_formFieldCascadingValues.FormField)
        .WithFlexibleDimensions(false)
        .WithPositions(positions);

        var connectedPanelConfig = new OverlayConfig
            {
                HasBackdrop = true,
                HasTransparentBackdrop = true,
                PositionStrategy = PositionStrategy.FlexibleConnectedTo,
                FlexibleConnectedPositionStrategyBuilder = flexibleConnectedPositionStrategyBuilder,
                MinWidth = MinWidth,
                MaxWidth = MaxWidth,
                MinHeight = MinHeight,
                MaxHeight = MaxHeight,
                MarginTop = MarginTop,
                Height = Height,
                Width = Width,
                ComponentType = ComponentType.Autocomplete,
                PanelClass = OverlayPanelClass
            };

        var items = new List<TItem>();

        if (!string.IsNullOrEmpty(CurrentValueAsString))
        {
            items = FilterAndSort(CurrentValueAsString);
        }
        else
        {
            items = _items;
        }

        var menuContent = new RenderFragment(x =>
        {
            x.OpenComponent(0, typeof(DnetAutocompletePanel<TItem>));
            x.AddAttribute(1, "Items", items);
            x.AddAttribute(2, "ItemHeight", ItemHeight);
            x.AddAttribute(3, "AutoCompleteListService", _autoCompleteListService);
            x.AddAttribute(4, "DisplayValueConverter", DisplayValueConverter);
            x.AddAttribute(5, "ItemPrefixContent", ItemPrefixContent);
            x.AddAttribute(6, "ItemSufixContent", ItemSufixContent);
            x.AddAttribute(7, "ChildContent", ItemChildContent);
            x.AddAttribute(10, "CurrentValue", CurrentValue);
            x.AddAttribute(11, "FooterContent", FooterContent);
            x.CloseComponent();
        });

        _menuReference = OverlayService.Attach(menuContent, connectedPanelConfig);

        _menuReference.Close += CloseFilter;
    }

    private void DetachMenu()
    {
        if (!_isOpen) return;

        var result = new OverlayResult
            {
                OverlayReferenceId = _menuReference.GetOverlayReferenceId(),
                CloseReason = CloseReason.Cancel
            };

        OverlayService.Detach(result);

        _isOpen = false;
    }

    void CloseFilter(OverlayResult overlayDataResult)
    {
        _isOpen = false;
    }

    private void Focus()
    {
        _hasFocus = true;

        if (_formEventService is not null) _formEventService.RaiseFocus(_hasFocus);

        StateHasChanged();
    }

    private void Blur()
    {
        if (string.IsNullOrEmpty(CurrentValueAsString))
        {
            _hasFocus = false;

            if (_formEventService is not null) _formEventService.RaiseFocus(_hasFocus);
        }

        ClosenMenu();

        StateHasChanged();
    }

    private void HandleOnValidationStateChanged(object? sender, FieldChangedEventArgs? args)
    {
        _hasErrors = EditContext?.GetValidationMessages(FieldIdentifier).Count() > 0;

        if (_formEventService is not null) _formEventService.RaiseError(_hasErrors && EditContext.IsModified(FieldIdentifier));
    }

    public void UpdateData(List<TItem> items)
    {
        _items = items ?? new List<TItem>();

        _autoCompleteListService.UdateList(items);

        StateHasChanged();
    }

    private List<TItem> FilterAndSort(string filterValue)
    {
        var items = new List<TItem>();

        if (FilterBy != null)
        {
            var qItems = _items.AsQueryable();

            try
            {
                items = FilterBy.Apply(qItems, filterValue ?? "").ToList();
            }
            catch (NullReferenceException)
            {
                throw new InvalidOperationException("Filter properties should not be null for the FilterBy Autocomplete parameter.");
            }
        }
        else
        {
            items = _items;
        }

        if (SortBy != null)
        {
            var qfItems = items.AsQueryable();

            items = SortBy.Apply(qfItems, filterValue, OrderStartingBySearchedString).ToList();
        }

        return items;
    }

    private void OnDisabledChanged()
    {
        _formEventService?.RaiseDisabledEvent(Disabled);

        StateHasChanged();
    }

    public void Dispose()
    {
        if (_menuReference != null) _menuReference.Close -= CloseFilter;

        if (_autoCompleteListService != null) _autoCompleteListService.OnItemSelected -= ItemSelected;

        _debounceTimer.Elapsed -= OnUserFinished;

        if (_formEventService is not null) _formEventService.OnClearContent -= ClearInput;
    }
}
