@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using System.Timers
@using Dnet.Blazor.Components.Autocomplete.Infrastructure.Services
@using Dnet.Blazor.Infrastructure.Services.CssBuilder
@using Microsoft.JSInterop

@implements IDisposable

@typeparam TItem

@inject IJSRuntime JSRuntime

<div class="dnet-autoc-menu-container" style="display:flex;flex-direction:column;width:100%;border-radius:@BorderRadius;">
    <div class="dnet-virtual-scroll-viewport dnet-virtual-scroll-orientation-vertical" style="@_styles">
        <div class="dnet-autoc-menu-container-filter-wrapper dnet-virtual-scroll-content-wrapper">
            @if (ItemPrefixContent != null || ItemSufixContent != null || ChildContent != null)
            {
                <Virtualize Items="@_items" TItem="TItem" Context="item" ItemSize="@ItemHeight">
                    <ItemContent>
                        <div class="dnet-autoc-menu-item" @onclick="@(() => SelectItem(item))" style="margin-bottom: 2px; height:@(ItemHeight)px">
                            <div class="dnet-autoc-content-wrapper">
                                @if (ItemPrefixContent != null)
                                {
                                    <div class="dnet-autoc-prefix-content">
                                        @ItemPrefixContent(item)
                                    </div>
                                }
                                <div class="dnet-autoc-middle-content">
                                    @if (ChildContent != null)
                                    {
                                        @ChildContent(item)
                                    }
                                    else
                                    {
                                        <span class="dnet-autoc-content-text">
                                            @DisplayValueConverter(item)
                                        </span>
                                    }
                                </div>
                                @if (ItemSufixContent != null)
                                {
                                    <div class="dnet-autoc-sufix-content">
                                        @ItemSufixContent(item)
                                    </div>
                                }
                            </div>
                        </div>
                    </ItemContent>
                </Virtualize>
            }
            else
            {
                <Virtualize Items="@_items" TItem="TItem" Context="item" ItemSize="@ItemHeight">
                    <div class="dnet-autoc-menu-item" @onclick="@(() => SelectItem(item))" style="margin-bottom: 2px; height:@(ItemHeight)px">
                        <span class="dnet-autoc-content-text has-content">
                            @DisplayValueConverter(item)
                        </span>
                    </div>
                </Virtualize>
            }
        </div>
    </div>
</div>


@code {

    [CascadingParameter]
    private int OverlayReferenceId { get; set; }

    [Parameter]
    public List<TItem> Items { get; set; }

    [Parameter]
    public string Width { get; set; } = "200px";

    [Parameter]
    public string Height { get; set; } = "200px";

    [Parameter]
    public string BorderRadius { get; set; } = "5px";

    [Parameter]
    public string MinWidth { get; set; }

    [Parameter]
    public string MinHeight { get; set; }

    [Parameter]
    public string MaxWidth { get; set; }

    [Parameter]
    public string MaxHeight { get; set; }

    [Parameter]
    public AutoCompleteListService<TItem> AutoCompleteListService { get; set; }

    [Parameter]
    public Func<TItem, string> DisplayValueConverter { get; set; }

    [Parameter]
    public RenderFragment<TItem> ChildContent { get; set; }

    [Parameter]
    public RenderFragment<TItem> ItemPrefixContent { get; set; }

    [Parameter]
    public RenderFragment<TItem> ItemSufixContent { get; set; }

    [Parameter]
    public int ItemHeight { get; set; } = 40;

    [Parameter]
    public int ContainerHeight { get; set; } = 200;


    private string _styles { get; set; } = null;

    private List<TItem> _items { get; set; } = new List<TItem>();


    protected override void OnInitialized()
    {
        _styles = GetStyles();

        _items = Items;

        AutoCompleteListService.OnUpdateList += ListUpdated;
    }

    private string GetStyles()
    {
        var styles = new StyleBuilder()
            .AddStyle("width", Width, when: !string.IsNullOrEmpty(Width))
            .AddStyle("height", Height, when: !string.IsNullOrEmpty(Height))
            .AddStyle("min-height", MinHeight, when: !string.IsNullOrEmpty(MinHeight))
            .AddStyle("min-width", MinWidth, when: !string.IsNullOrEmpty(MinWidth))
            .AddStyle("max-width", MaxWidth, when: !string.IsNullOrEmpty(MaxWidth))
            .AddStyle("max-height", MaxHeight, when: !string.IsNullOrEmpty(MaxHeight))
            .AddStyle("transform", $"transform: translateY(@_transformY)")
            .Build();

        return styles;
    }

    private RenderFragment CreateCellTemplateComponent(TItem item, Type componeType) => builder =>
    {
        builder.OpenComponent(0, componeType);
        builder.AddAttribute(1, "Item", item);
        builder.CloseComponent();
    };

    private void ListUpdated(List<TItem> items)
    {
        _items = items;

        StateHasChanged();
    }

    private void SelectItem(TItem item)
    {
        AutoCompleteListService.UpdateSelectedItem(item);
    }

    public void Dispose()
    {
        AutoCompleteListService.OnUpdateList -= ListUpdated;
    }

}
